/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/components/alerts.js":
/*!*************************************!*\
  !*** ./src/js/components/alerts.js ***!
  \*************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n * Catalogue of Alerts (these are the messages that get displayed\n * to the user)\n */\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! backbone */ \"./src/libs/backbone.js\"), __webpack_require__(/*! js/mixins/hardened */ \"./src/js/mixins/hardened.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Backbone, Hardened) {\n  var Alerts = {\n    TYPE: {\n      ERROR: 'error',\n      INFO: 'info',\n      WARNING: 'warning',\n      SUCCESS: 'success',\n      DANGER: 'danger'\n    },\n    ACTION: {\n      CALL_PUBSUB: 2,\n      TRIGGER_FEEDBACK: 1\n    }\n  };\n  return Alerts;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//# sourceURL=webpack://bumblebee/./src/js/components/alerts.js?");

/***/ }),

/***/ "./src/js/components/analytics.js":
/*!****************************************!*\
  !*** ./src/js/components/analytics.js ***!
  \****************************************/
/***/ (function(module, exports) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n  /*\n   * Set of targets\n   * each has a set of hooks which coorespond to the event label passed\n   * types represents the possible event targets which can be used\n   * url is a template which will be passed the incoming data\n   */\n  var TARGETS = {\n    resolver: {\n      hooks: ['toc-link-followed', 'abstract-link-followed', 'citations-link-followed', 'associated-link-followed'],\n      types: ['abstract', 'citations', 'references', 'metrics', 'coreads', 'similar', 'graphics', 'associated', 'toc'],\n      url: function url(_ref) {\n        var bibcode = _ref.bibcode,\n            target = _ref.target;\n        return \"link_gateway/\".concat(bibcode, \"/\").concat(target);\n      }\n    }\n  };\n  /**\n   * fire off the xhr request to the url\n   *\n   * @param {string} url\n   * @param {object} data\n   */\n\n  var sendEvent = function sendEvent(url) {\n    window.fetch(url, {\n      method: 'GET'\n    }).catch(function (error) {\n      window.getSentry().captureMessage('Failed to send analytics event', {\n        extra: {\n          url: url,\n          error: error.message\n        }\n      });\n    });\n  };\n\n  var isValidEvent = function isValidEvent(_ref2) {\n    var label = _ref2.label,\n        target = _ref2.target;\n\n    if (typeof label !== 'string' || typeof target !== 'string') {\n      return false;\n    }\n\n    return TARGETS.resolver.hooks.includes(label) && TARGETS.resolver.types.includes(target);\n  };\n  /**\n   * Go through the targets and fire the event if the label passed\n   * matches one of the hooks specified.  Also the data.target must match one\n   * of the types listed on the target config\n   *\n   * @param {string} label - the event label\n   * @param {object} data - the event data\n   */\n\n\n  var adsLogger = function adsLogger(label, data) {\n    var target = data ? data.target : null;\n    var bibcode = data ? data.bibcode : null;\n\n    if (bibcode !== null && isValidEvent({\n      label: label,\n      target: target\n    })) {\n      sendEvent(data.url ? data.url : TARGETS.resolver.url({\n        bibcode: bibcode,\n        target: target\n      }));\n    }\n  };\n\n  var buffer = [];\n  var gaName = window.GoogleAnalyticsObject || 'ga';\n\n  var cleanBuffer = function cleanBuffer() {\n    if (window[gaName]) {\n      for (var i = 0; i < buffer.length; i++) {\n        window[gaName].apply(this, buffer[i]);\n      }\n\n      buffer = [];\n    }\n  };\n\n  var CACHE_TIMEOUT = 300;\n  /**\n   * Simple debouncing mechanism with caching\n   * this will store stringified version of the incoming events and provide a way to\n   * check if the event has recently been cached.  With a short rolling timer to keep the timeout short to hopefully\n   * only target duplicate calls.\n   */\n\n  var AnalyticsCacher = /*#__PURE__*/function () {\n    function AnalyticsCacher() {\n      _classCallCheck(this, AnalyticsCacher);\n\n      this.timer = null;\n      this.cache = new Set();\n    }\n\n    _createClass(AnalyticsCacher, [{\n      key: \"stringify\",\n      value: function stringify(args) {\n        return JSON.stringify(args, function (key, value) {\n          // filter out this cache-buster id added by GTM\n          if (key === 'gtm.uniqueEventId') {\n            return undefined;\n          }\n\n          return value;\n        });\n      }\n    }, {\n      key: \"add\",\n      value: function add() {\n        this._resetTimeout();\n\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        return this.cache.add(this.stringify(args));\n      }\n    }, {\n      key: \"has\",\n      value: function has() {\n        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n          args[_key2] = arguments[_key2];\n        }\n\n        return this.cache.has(this.stringify(args));\n      }\n    }, {\n      key: \"_resetTimeout\",\n      value: function _resetTimeout() {\n        clearTimeout(this.timer);\n        this.timer = setTimeout(this._clear.bind(this), CACHE_TIMEOUT);\n      }\n    }, {\n      key: \"_clear\",\n      value: function _clear() {\n        this.cache.clear();\n      }\n    }]);\n\n    return AnalyticsCacher;\n  }();\n\n  var cacher = new AnalyticsCacher();\n\n  var Analytics = function Analytics(action, event, type, description) {\n    for (var _len3 = arguments.length, args = new Array(_len3 > 4 ? _len3 - 4 : 0), _key3 = 4; _key3 < _len3; _key3++) {\n      args[_key3 - 4] = arguments[_key3];\n    }\n\n    if (cacher.has(arguments)) {\n      return;\n    }\n\n    cacher.add(arguments);\n    adsLogger.apply(null, Array.prototype.slice.call(arguments, 3)); // if the action is send and the event is event, then we want to send the event to the dataLayer\n\n    if (Array.isArray(window.dataLayer) && action === 'send' && event === 'event') {\n      // some events are 'interaction' or 'error', so add that to the event name\n      window.dataLayer.push({\n        event: \"\".concat(type, \"_\").concat(description),\n        // if the next argument is an object, we'll use that as the data, ignore an extra arguments\n        value1: args[0],\n        value2: args[1],\n        value3: args[2]\n      });\n    } else if (Array.isArray(window.dataLayer) && action === 'send') {\n      window.dataLayer.push({\n        event: event,\n        value1: type,\n        value2: description,\n        value3: args[0]\n      });\n    } else if (Array.isArray(window.dataLayer) && action === 'set') {\n      window.dataLayer.push({\n        event: 'config',\n        value1: event,\n        value2: type,\n        value3: description\n      });\n    }\n  };\n  /**\n   * Get the datalayer for sending events to\n   * @returns {*|*[]}\n   */\n\n\n  Analytics.getDL = function () {\n    if (window.dataLayer && Array.isArray(window.dataLayer)) {\n      return window.dataLayer;\n    }\n\n    return [];\n  };\n  /**\n   * Push a new object to the datalayer\n   * @param {Object} data\n   */\n\n\n  Analytics.push = function (data) {\n    if (cacher.has(data)) {\n      return;\n    }\n\n    cacher.add(data);\n    Analytics.getDL().push(data);\n  };\n  /**\n   * Reset the datalayer\n   */\n\n\n  Analytics.reset = function () {\n    Analytics.getDL().push(function () {\n      this.reset();\n    });\n  };\n  /**\n   * set a value on the datalayer\n   * @param {string} property\n   * @param {unknown} value\n   */\n\n\n  Analytics.set = function (property, value) {\n    Analytics.getDL().push(function () {\n      this.set(property, value);\n    });\n  };\n  /**\n   * get a value on the datalayer\n   * @param {string} property\n   */\n\n\n  Analytics.get = function (property) {\n    var value;\n    Analytics.getDL().push(function () {\n      value = this.get(property);\n    });\n    return value;\n  };\n\n  return Analytics;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//# sourceURL=webpack://bumblebee/./src/js/components/analytics.js?");

/***/ }),

/***/ "./src/js/components/api_feedback.js":
/*!*******************************************!*\
  !*** ./src/js/components/api_feedback.js ***!
  \*******************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! underscore */ \"./node_modules/underscore/underscore-umd.js\"), __webpack_require__(/*! backbone */ \"./src/libs/backbone.js\"), __webpack_require__(/*! js/mixins/hardened */ \"./src/js/mixins/hardened.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (_, Backbone, Hardened) {\n  var ApiFeedback = function ApiFeedback(options) {\n    _.extend(this, _.defaults(options || {}, {\n      code: 200,\n      msg: undefined\n    }));\n\n    this.setCode(this.code);\n  };\n\n  ApiFeedback.CODES = {\n    INVALID_PASSWORD: 498,\n    ACCOUNT_NOT_FOUND: 495,\n    // Account not found during signin\n    ALREADY_LOGGED_IN: 493,\n    // Already signed during signup\n    REQUIRES_LOGIN: 491,\n    TOO_MANY_CHARACTERS: 486,\n    BAD_REQUEST: 400,\n    UNAUTHORIZED: 401,\n    NOT_FOUND: 404,\n    INTERNAL_SERVER_ERROR: 500,\n    BAD_GATEWAY: 502,\n    SERVER_ERROR: 503,\n    TOO_MANY_FAILURES: 580,\n    ALL_FINE: 200,\n    KEEP_WAITING: 190,\n    TESTING: 0,\n    // Internal events\n    MAKE_SPACE: -1,\n    UNMAKE_SPACE: -1.1,\n    SEARCH_CYCLE_STARTED: -2,\n    SEARCH_CYCLE_FAILED_TO_START: -3,\n    SEARCH_CYCLE_PROGRESS: -4,\n    SEARCH_CYCLE_STOP_MONITORING: -5,\n    SEARCH_CYCLE_FINISHED: -6,\n    QUERY_ASSISTANT: -7,\n    ALERT: -8,\n    CANNOT_ROUTE: -9,\n    API_REQUEST_ERROR: -10,\n    BIBCODE_DATA_REQUESTED: -11\n  };\n  var _codes = {};\n\n  _.each(_.pairs(ApiFeedback.CODES), function (p) {\n    _codes[p[1]] = p[0];\n  });\n\n  _.extend(ApiFeedback.prototype, {\n    hardenedInterface: {\n      code: 'integer value of the code',\n      msg: 'string message',\n      toJSON: 'for cloning',\n      getApiRequest: 'to get the original request',\n      getSenderKey: 'retrieve the senders key'\n    },\n    initialize: function initialize() {},\n    toJSON: function toJSON() {\n      return {\n        code: this.code,\n        msg: this.msg\n      };\n    },\n    setCode: function setCode(c) {\n      if (!_codes[c]) {\n        throw new Error('This code is not in the list ApiCodes - please extend js/components/api_feedback first:', this.code);\n      }\n\n      this.code = c;\n    },\n    setApiRequest: function setApiRequest(apiRequest) {\n      this.req = apiRequest;\n    },\n    getApiRequest: function getApiRequest() {\n      return this.req;\n    },\n    setMsg: function setMsg(msg) {\n      this.msg = msg;\n    },\n    getSenderKey: function getSenderKey() {\n      return this.senderKey;\n    },\n    setSenderKey: function setSenderKey(key) {\n      this.senderKey = key;\n    }\n  }, Hardened);\n\n  ApiFeedback.extend = Backbone.Model.extend;\n  return ApiFeedback;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//# sourceURL=webpack://bumblebee/./src/js/components/api_feedback.js?");

/***/ }),

/***/ "./src/js/components/api_query.js":
/*!****************************************!*\
  !*** ./src/js/components/api_query.js ***!
  \****************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*\n A facade: api query exposing only the set of functions that we allow. This is\n the module that you want to load in the application (do not load the concrete\n implementaions, such as solr_params !)\n\n Put in your config:\n map: {\n 'your/module': {\n 'api_query_impl': 'js/components/specific_impl_of_the_api_query'\n }\n },\n\n */\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! backbone */ \"./src/libs/backbone.js\"), __webpack_require__(/*! underscore */ \"./node_modules/underscore/underscore-umd.js\"), __webpack_require__(/*! js/components/solr_params */ \"./src/js/components/solr_params.js\"), __webpack_require__(/*! js/components/facade */ \"./src/js/components/facade.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Backbone, _, ApiQueryImplementation, Facade) {\n  var hardenedInterface = {\n    add: 'add values',\n    set: 'set (replace existing)',\n    get: 'get values',\n    has: 'has a key',\n    hasVal: 'more specific `has` using _.isEmpty',\n    url: 'url string of the params',\n    load: 'loads query as a string',\n    clear: 'clears all values',\n    unset: 'removes a key',\n    toJSON: 'values back as JSON object',\n    clone: 'make a copy',\n    isLocked: true,\n    lock: true,\n    unlock: true,\n    pairs: 'get all values as pairs',\n    keys: 'as keys',\n    values: 'only values',\n    hasChanged: 'whether this object has modification (since its creation)',\n    previousAttributes: 'get all changed attributes',\n    previous: 'previous values for a given attribute'\n  };\n\n  var ApiQuery = function ApiQuery(data, options) {\n    // Facade pattern, we want to expose only limited API\n    // despite the fact that the underlying instance has\n    // all power of the Backbone.Model\n    if (data instanceof ApiQueryImplementation) {\n      this.innerQuery = new Facade(hardenedInterface, data);\n    } else {\n      this.innerQuery = new Facade(hardenedInterface, new ApiQueryImplementation(data, options));\n    }\n  };\n\n  var toInsert = {};\n\n  _.each(_.keys(hardenedInterface), function (element, index, list) {\n    toInsert[element] = function () {\n      return this.innerQuery[element].apply(this.innerQuery, arguments);\n    };\n  });\n\n  _.extend(ApiQuery.prototype, toInsert, {\n    clone: function clone() {\n      var clone = this.innerQuery.clone.apply(this.innerQuery, arguments);\n      return new ApiQuery(clone);\n    },\n    load: function load() {\n      var clone = this.innerQuery.load.apply(this.innerQuery, arguments);\n      return new ApiQuery(clone);\n    }\n  });\n\n  return ApiQuery;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//# sourceURL=webpack://bumblebee/./src/js/components/api_query.js?");

/***/ }),

/***/ "./src/js/components/api_query_updater.js":
/*!************************************************!*\
  !*** ./src/js/components/api_query_updater.js ***!
  \************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n * Created by rchyla on 5/24/14.\n *\n * Set of utilities for manipulating ApiQuery object. These are mainly\n * useful for widgets that often do the same operations with the\n * query.\n *\n * The object must be initialized with an 'identifier' -- this identifier\n * will represent a context; so we'll be touching all elements that\n * belong to the context\n *\n * TODO: need to distinguish globalOperator from 'operator' inside clauses\n * TODO: the 'globalOperator' joins clauses; 'operator' joins elements of the\n * TODO: clauses\n *\n */\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! underscore */ \"./node_modules/underscore/underscore-umd.js\"), __webpack_require__(/*! js/components/api_query */ \"./src/js/components/api_query.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (_, ApiQuery) {\n  var ApiQueryUpdater = function ApiQueryUpdater(contextIdentifier, options) {\n    if (!contextIdentifier || !_.isString(contextIdentifier)) {\n      throw new Error('You must initialize the ApiQueryUpdater with a context (which is a string)');\n    }\n\n    this.context = contextIdentifier;\n    this.defaultOperator = ' ';\n    this.operators = [' ', 'AND', 'OR', 'NOT', 'NEAR'];\n    this.defaultMode = 'limit';\n    this.operationModes = ['limit', 'exclude', 'expand', 'replace', 'remove'];\n    this.impossibleString = \"\\uFFFC\\uFFFC\\uFFFC\";\n\n    _.extend(this, options);\n  };\n\n  _.extend(ApiQueryUpdater.prototype, {\n    /**\n     * Modifies the query - it will search for a string inside the query (using previously\n     * saved state) and update the query 'parameter'\n     *\n     * @param field\n     *      this is the name of the parameter we are changing inside apiQeury\n     * @param apiQuery\n     *      the apiQuery object we are updating\n     * @param queryCondition\n     *      String|[String] - new conditions to set\n     * @param operator\n     *      String: this will serve as concatenator for the conditions\n     */\n    updateQuery: function updateQuery(apiQuery, field, mode, queryCondition, options) {\n      options = _.defaults({}, options, {\n        prefix: '__'\n      });\n\n      if (!field || !_.isString(field)) {\n        throw new Error('You must tell us what parameter to update in the ApiQuery');\n      } // globalOperator = this._sanitizeOperator(globalOperator);\n      // local name\n\n\n      var n = this._n(field, options.prefix); // create copy of the field\n\n\n      var q = _.clone(apiQuery.get(field));\n\n      var oldConditionAsString;\n      var newConditionAsString;\n      var newConditions;\n      var existingConditions; // first check if we have any existing conditions\n\n      existingConditions = this._getExistingVals(apiQuery, n);\n      queryCondition = this._sanitizeConditionAsArray(queryCondition);\n      mode = this._sanitizeMode(mode);\n      var operator;\n\n      if (mode == 'limit') {\n        operator = 'AND';\n      } else if (mode == 'exclude') {\n        operator = 'NOT';\n      } else if (mode == 'expand') {\n        operator = 'OR';\n      } else if (mode == 'replace') {\n        this._closeExistingVals(apiQuery, this._n(field, options.prefix));\n\n        apiQuery.set(this._n(field, options.prefix), ['AND', queryCondition[0]]);\n        return apiQuery.set(field, queryCondition[0]);\n      } else if (mode == 'remove') {\n        operator = existingConditions[0];\n      } else {\n        throw new Error('Unsupported mode/operator:', mode);\n      }\n\n      if (!apiQuery.has(field)) {\n        var conditions = [operator].concat(queryCondition);\n        apiQuery.set(field, this._buildQueryFromConditions(conditions));\n        apiQuery.set(this._n(field, options.prefix), conditions);\n        return;\n      }\n\n      if (existingConditions) {\n        // if the operators differ, it means we cannot safely update the query\n        // we must treat it as a new query\n        if (existingConditions[0] !== operator) {\n          this._closeExistingVals(apiQuery, n);\n\n          return this.updateQuery(apiQuery, field, mode, queryCondition);\n        }\n\n        oldConditionAsString = this._buildQueryFromConditions(existingConditions);\n      } else {\n        existingConditions = [operator]; // first value is always operator\n\n        if (q.length == 1) {\n          // we got a string, but that string could be a whole phrase\n          if (q[0].indexOf(' ') == -1) {\n            // simple string\n            oldConditionAsString = q[0];\n            existingConditions.push(q[0]);\n          } else {\n            oldConditionAsString = q[0];\n            var sillyTest = q[0].toLowerCase();\n\n            if (sillyTest.indexOf(' and ') > -1 || sillyTest.indexOf(' or ') > -1 || sillyTest.indexOf(' not ') > -1 || sillyTest.indexOf(' near') > -1 || sillyTest.indexOf('(') > 2) {\n              existingConditions.push('(' + q[0] + ')'); // enclose the expression in brackets, just to be safe\n            } else {\n              existingConditions.push(q[0]);\n            }\n          }\n        } else {\n          oldConditionAsString = this.impossibleString;\n        }\n      } // 'limit' means that the broader query will become 'narrower'\n      // by gaining more AND'ed 'conditions'\n      // 'expand' means that the query is becoming broader by gaining\n      // more conditions (these are OR'ed)\n\n\n      if (mode == 'limit' || mode == 'expand') {\n        // join the old and the new conditoins (remove the duplicates)\n        // we are basically trying to update the existing query\n        // by adding more conditions into the same clause\n        newConditions = _.union(existingConditions, queryCondition);\n        newConditionAsString = this._buildQueryFromConditions(newConditions);\n\n        var testq = _.clone(q); // try to find the pre-condition and replace it with a new value\n\n\n        if (this._modifyArrayReplaceString(testq, oldConditionAsString, newConditionAsString)) {\n          apiQuery.set(field, testq); // success\n          // save the values inside the query (so that we can use them if we are called next time)\n\n          apiQuery.set(n, newConditions);\n          return;\n        }\n      } // 'exclude' means that we are ADDING more conditions to the query; the query\n      // was broader; not it will explicitly 'exclude' some documents; again - there\n      // can also be 'exclude' conditions; so if possible, we'll enlarge their number\n\n\n      if (mode == 'exclude') {\n        var modifiedExisting = _.clone(existingConditions);\n\n        modifiedExisting[0] = 'OR';\n        oldConditionAsString = ' NOT ' + this._buildQueryFromConditions(modifiedExisting);\n        newConditions = _.union(existingConditions, queryCondition);\n\n        var modifiedConditions = _.clone(newConditions);\n\n        modifiedConditions[0] = 'OR';\n        newConditionAsString = ' NOT ' + this._buildQueryFromConditions(modifiedConditions);\n\n        var testq = _.clone(q); // try to find the pre-condition and replace it with a new value\n\n\n        if (this._modifyArrayReplaceString(testq, oldConditionAsString, newConditionAsString)) {\n          apiQuery.set(field, testq); // success\n          // save the values inside the query (so that we can use them if we are called next time)\n\n          apiQuery.set(n, newConditions);\n          return;\n        }\n      } else if (mode == 'remove') {\n        newConditions = _.difference(existingConditions, queryCondition);\n        newConditionAsString = this._buildQueryFromConditions(newConditions); // we'll be deleting\n\n        var testq = _.clone(q); // try to find the pre-condition and replace it with a new value\n\n\n        if (this._modifyArrayReplaceString(testq, oldConditionAsString, newConditionAsString)) {\n          apiQuery.set(field, testq); // success\n          // save the values inside the query (so that we can use them if we are called next time)\n\n          apiQuery.set(n, newConditions);\n          return;\n        }\n      } // we didn't find an old query that could be updated, so this means that we have\n      // to add a new logical condition to the existing query string.\n\n\n      if (mode == 'limit') {\n        newConditions = this._modifyArrayAddString(q, queryCondition, 'AND');\n      } else if (mode == 'exclude') {\n        newConditions = this._modifyArrayAddString(q, queryCondition, 'NOT');\n      } else if (mode == 'expand') {\n        newConditions = this._modifyArrayAddString(q, queryCondition, 'OR');\n      }\n\n      apiQuery.set(n, newConditions);\n      apiQuery.set(field, q);\n    },\n\n    /**\n     * Tells whether the string needs escaping (it ignores empty space)\n     *\n     * @param value\n     */\n    needsEscape: function needsEscape(s) {\n      var sb = [];\n      var c;\n\n      for (var i = 0; i < s.length; i++) {\n        c = s[i]; // These characters are part of the query syntax and must be escaped\n\n        if (c == '\\\\' || c == '+' || c == '-' || c == '!' || c == '(' || c == ')' || c == ':' || c == '^' || c == '[' || c == ']' || c == '\"' || c == '{' || c == '}' || c == '~' || c == '*' || c == '?' || c == '|' || c == '&' || c == '/') {\n          return true;\n        }\n      }\n\n      return false;\n    },\n\n    /**\n     * Escapes special characters (but not whitespace)\n     *\n     * @param value\n     */\n    escape: function escape(s) {\n      var sb = [];\n      var c;\n\n      for (var i = 0; i < s.length; i++) {\n        c = s[i]; // These characters are part of the query syntax and must be escaped\n\n        if (c == '\\\\' || c == '+' || c == '-' || c == '!' || c == '(' || c == ')' || c == ':' || c == '^' || c == '[' || c == ']' || c == '\"' || c == '{' || c == '}' || c == '~' || c == '*' || c == '?' || c == '|' || c == '&' || c == '/') {\n          sb.push('\\\\');\n        }\n\n        sb.push(c);\n      }\n\n      return sb.join('');\n    },\n    escapeInclWhitespace: function escapeInclWhitespace(s) {\n      var sb = [];\n      var c;\n\n      for (var i = 0; i < s.length; i++) {\n        c = s[i]; // These characters are part of the query syntax and must be escaped\n\n        if (c == '\\\\' || c == '+' || c == '-' || c == '!' || c == '(' || c == ')' || c == ':' || c == '^' || c == '[' || c == ']' || c == '\"' || c == '{' || c == '}' || c == '~' || c == '*' || c == '?' || c == '|' || c == '&' || c == '/' || c == ' ' || c == '\\t') {\n          sb.push('\\\\');\n        }\n\n        sb.push(c);\n      }\n\n      return sb.join('');\n    },\n\n    /**\n     * Wraps string between quotes - and escapes any quotes if present\n     * @param s\n     * @returns {string}\n     */\n    quoteIfNecessary: function quoteIfNecessary(s, quoteChar, quoteCharEnd) {\n      return this.quote(s, quoteChar, quoteCharEnd, true);\n    },\n\n    /**\n     * Wraps string between quotes - and escapes any quotes if present\n     * @param s\n     * @returns {string}\n     */\n    quote: function quote(s, quoteChar, quoteCharEnd, onlyIfNecessary) {\n      if (!quoteChar) quoteChar = '\"';\n      if (!quoteCharEnd) quoteCharEnd = quoteChar;\n      if (_.isUndefined(onlyIfNecessary)) onlyIfNecessary = false;\n      var sb = [];\n      var c;\n      var needsQuotes = false;\n\n      for (var i = 0; i < s.length; i++) {\n        c = s[i];\n\n        if (c == '\\\\' || c == '+' || c == '-' || c == '!' || c == '(' || c == ')' || c == ':' || c == '^' || c == '[' || c == ']' || c == '\"' || c == '{' || c == '}' || c == '~' || // || c == '*' || c == '?'\n        c == '|' || c == '&' || c == '/' || c == ' ' || c == '\\t') {\n          needsQuotes = true;\n        }\n\n        if ((c == quoteChar || c == quoteCharEnd) && (i == 0 || i > 0 && s[i - 1] !== '\\\\')) {\n          sb.push('\\\\');\n        }\n\n        sb.push(c);\n      } // detect presence of quotes in the original string\n\n\n      if (onlyIfNecessary == true && sb[0] == '\\\\' && sb[1] == '\"' && sb[sb.length - 2] == '\\\\' && sb[sb.length - 1] == '\"') {\n        sb[0] = '';\n        sb[sb.length - 2] = '';\n        return sb.join('');\n      }\n\n      if (needsQuotes || onlyIfNecessary == false) {\n        return quoteChar + sb.join('') + quoteCharEnd;\n      }\n\n      return sb.join('');\n    },\n\n    /**\n     * Attaches to the ApiQuery object a storage of tmp values; these are\n     * not affecting anything inside the query; but the query is carrying them\n     * around as long as it was not cloned() etc\n     *\n     * @param key\n     * @param value\n     */\n    saveTmpEntry: function saveTmpEntry(apiQuery, key, value) {\n      var storage = this._getTmpStorage(apiQuery, true);\n\n      var oldVal;\n\n      if (key in storage) {\n        oldVal = storage[key];\n      }\n\n      storage[key] = value;\n      return oldVal;\n    },\n    removeTmpEntry: function removeTmpEntry(apiQuery, key) {\n      var storage = this._getTmpStorage(apiQuery, true);\n\n      var val = storage[key];\n      delete storage[key];\n      return val;\n    },\n    getTmpEntry: function getTmpEntry(apiQuery, key, defaultValue) {\n      var storage;\n\n      if (defaultValue) {\n        storage = this._getTmpStorage(apiQuery, true);\n      } else {\n        storage = this._getTmpStorage(apiQuery, false);\n      }\n\n      if (key in storage) {\n        return storage[key];\n      }\n\n      storage[key] = defaultValue;\n      return defaultValue;\n    },\n    hasTmpEntry: function hasTmpEntry(apiQuery, key) {\n      var storage = this._getTmpStorage(apiQuery);\n\n      return key in storage;\n    },\n    _getTmpStorage: function _getTmpStorage(apiQuery, createIfNotExists) {\n      var n = this._n('__tmpStorage');\n\n      if (!apiQuery.hasOwnProperty(n)) {\n        if (!createIfNotExists) return {};\n        apiQuery[n] = {};\n      }\n\n      return apiQuery[n];\n    },\n    _n: function _n(name, prefix) {\n      return (_.isString(prefix) ? prefix : '__') + this.context + '_' + name;\n    },\n    _buildQueryFromConditions: function _buildQueryFromConditions(conditions) {\n      if (conditions.length <= 1) {\n        throw new Error('Violation of contract: first condition is always an operator');\n      }\n\n      var op = conditions[0];\n\n      if (op != ' ') {\n        op = ' ' + op + ' ';\n      }\n\n      return '(' + conditions.slice(1).join(op) + ')';\n    },\n\n    /**\n     * Searches for values inside the array and replaces sections\n     * Returns number of modifications made\n     *\n     * @param arr\n     * @param search\n     * @param replace\n     * @param maxNumMod\n     *    maximum number of modifications to make; you can choose to\n     *    replace only the first value found\n     * @returns {integer}\n     * @private\n     */\n    _modifyArrayReplaceString: function _modifyArrayReplaceString(arr, search, replace, maxNumMod) {\n      var numMod = 0;\n      if (!maxNumMod) maxNumMod = -1;\n\n      if (!search) {\n        throw new Error('Your search is empty, you fool');\n      }\n\n      var modified = false;\n\n      _.each(arr, function (text, i) {\n        if (maxNumMod > 0 && numMod > maxNumMod) {\n          return;\n        }\n\n        if (text.indexOf(search) > -1) {\n          arr[i] = text.replace(search, replace);\n          numMod += 1;\n        }\n      });\n\n      return numMod;\n    },\n\n    /**\n     * Adds the new value into the array\n     * @param arr\n     * @param conditions\n     * @private\n     */\n    _modifyArrayAddString: function _modifyArrayAddString(arr, conditions, operator) {\n      // will always add to the latest string\n      if ((arr.length == 0 || arr[arr.length - 1].trim() == '') && (operator == 'NOT' || operator == 'NEAR')) {\n        throw new Error('Invalid operation; cannot apply NOT/NEAR on single clause');\n      }\n\n      var newQ = arr[arr.length - 1];\n      var newConditions = [operator, newQ].concat(conditions);\n      arr[arr.length - 1] = this._buildQueryFromConditions(newConditions);\n      return newConditions;\n    },\n\n    /**\n     * Gets the valus of the condition\n     * @param apiQuery\n     * @param key\n     *    the conditon 'name', typically st like __condition_author_q; it differs based on the\n     *    operation (type of update/widget/filter etc)\n     * @param defaults\n     *    what to return if 'key' is not present\n     * @returns {*}\n     * @private\n     */\n    _getExistingVals: function _getExistingVals(apiQuery, key, defaults) {\n      if (apiQuery.has(key)) {\n        return apiQuery.get(key);\n      }\n\n      return defaults;\n    },\n\n    /**\n     * When we have conditions for the previous context; but their operator is\n     * different, it means that the new conditions represent a new clause. So\n     * we need to do something with the old conditions (we could stack them\n     * but for now, the simple/robust solution is to simply remove them ->\n     * this means they will not be available for updates/manipulation -->\n     * theh query will be extended)\n     *\n     * @param condName\n     * @private\n     */\n    _closeExistingVals: function _closeExistingVals(apiQuery, condName) {\n      apiQuery.unset(condName);\n    },\n    _sanitizeMode: function _sanitizeMode(mode) {\n      if (!mode) {\n        return this.defaultMode;\n      }\n\n      var i = _.indexOf(this.operationModes, mode);\n\n      if (i == -1) {\n        throw new Error('Unkwnown mode: ' + mode);\n      }\n\n      return this.operationModes[i];\n    },\n    _sanitizeOperator: function _sanitizeOperator(operator) {\n      if (!operator) {\n        return this.defaultOperator;\n      }\n\n      if (_.isString(operator)) {\n        if (operator.trim() == '') {\n          return this.defaultOperator;\n        }\n      } else {\n        throw new Error('Operator must be a string');\n      }\n\n      operator = operator.toUpperCase();\n\n      var i = _.indexOf(this.operators, operator);\n\n      if (i == -1) {\n        throw new Error('Unknown operator: ', operator);\n      }\n\n      return this.operators[i];\n    },\n    _sanitizeConditionAsArray: function _sanitizeConditionAsArray(condition) {\n      if (!condition) {\n        throw new Error('The condition must be set (string/array of strings)');\n      }\n\n      if (_.isString(condition)) {\n        return [condition];\n      }\n\n      condition = _.without(_.flatten(condition), '', false, null, undefined, NaN);\n\n      if (condition.length == 0) {\n        throw new Error('After removing empty values, no condition was left');\n      }\n\n      return condition;\n    },\n\n    /**\n     * Cleans up the *clone* of the apiQuery by removing all the entries\n     * that are inserted into ApiQuery by the query updater.\n     *\n     * @param apiQuery\n     */\n    clean: function clean(apiQuery) {\n      var q = {};\n\n      if (apiQuery && apiQuery.keys) {\n        _.each(apiQuery.keys(), function (key) {\n          if (!(key.substring(0, 2) == '__')) {\n            q[key] = apiQuery.get(key);\n          }\n        });\n      }\n\n      return new ApiQuery(q);\n    }\n  });\n\n  return ApiQueryUpdater;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//# sourceURL=webpack://bumblebee/./src/js/components/api_query_updater.js?");

/***/ }),

/***/ "./src/js/components/api_request.js":
/*!******************************************!*\
  !*** ./src/js/components/api_request.js ***!
  \******************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n * Created by rchyla on 3/28/14.\n */\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! underscore */ \"./node_modules/underscore/underscore-umd.js\"), __webpack_require__(/*! backbone */ \"./src/libs/backbone.js\"), __webpack_require__(/*! js/components/facade */ \"./src/js/components/facade.js\"), __webpack_require__(/*! js/components/default_request */ \"./src/js/components/default_request.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (_, Backbone, Facade, ApiRequestImpl) {\n  var hardenedInterface = {\n    // add makes no sense with request\n    get: 'get a key',\n    set: 'set (replace existing)',\n    url: 'url string defining this request',\n    has: 'has a key',\n    load: 'loads request as a string',\n    clear: 'clears all values',\n    unset: 'removes a key',\n    toJSON: 'values back as JSON object',\n    clone: 'make a copy',\n    isLocked: true,\n    lock: true,\n    unlock: true,\n    pairs: 'get all values as pairs',\n    keys: 'as keys',\n    values: 'only values',\n    hasChanged: 'whether this object has modification (since its creation)',\n    previousAttributes: 'get all changed attributes',\n    previous: 'previous values for a given attribute'\n  };\n\n  var ApiRequest = function ApiRequest(data, options) {\n    // Facade pattern, we want to expose only limited API\n    // despite the fact that the underlying instance has\n    // all power of the Backbone.Model\n    if (data instanceof ApiRequestImpl) {\n      this.innerRequest = new Facade(hardenedInterface, data);\n    } else {\n      this.innerRequest = new Facade(hardenedInterface, new ApiRequestImpl(data, options));\n    }\n  };\n\n  var toInsert = {};\n\n  _.each(_.keys(hardenedInterface), function (element, index, list) {\n    toInsert[element] = function () {\n      return this.innerRequest[element].apply(this.innerRequest, arguments);\n    };\n  });\n\n  _.extend(ApiRequest.prototype, toInsert, {\n    clone: function clone() {\n      var clone = this.innerRequest.clone.apply(this.innerRequest, arguments);\n      return new ApiRequest(clone);\n    },\n    load: function load() {\n      var clone = this.innerRequest.load.apply(this.innerRequest, arguments);\n      return new ApiRequest(clone);\n    }\n  });\n\n  return ApiRequest;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//# sourceURL=webpack://bumblebee/./src/js/components/api_request.js?");

/***/ }),

/***/ "./src/js/components/api_response.js":
/*!*******************************************!*\
  !*** ./src/js/components/api_response.js ***!
  \*******************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*\n * A simple wrapper around the API response for ADS. The underlying\n * implementation of the Response object can provide a specific\n * logic, so don't be surprised if you see a different behaviour.\n * But the API remains the same!\n *\n * To configure what implementation you want for your module, use this\n * in the app config:\n *\n * map: {\n *  'your/module': {\n *    'api_response_impl': 'js/components/specific_impl_of_the_api_response'\n *  }\n * },\n */\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! underscore */ \"./node_modules/underscore/underscore-umd.js\"), __webpack_require__(/*! backbone */ \"./src/libs/backbone.js\"), __webpack_require__(/*! js/components/solr_response */ \"./src/js/components/solr_response.js\"), __webpack_require__(/*! js/components/facade */ \"./src/js/components/facade.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (_, Backbone, ApiResponseImplementation, Facade) {\n  var hardenedInterface = {\n    set: 'set (replace existing)',\n    get: 'get values',\n    has: 'has a key',\n    toJSON: 'values back as JSON object',\n    clone: 'make a copy',\n    url: 'url string of the params',\n    isLocked: true,\n    lock: true,\n    unlock: true,\n    setApiQuery: 'sets the ApiQuery',\n    getApiQuery: 'gets the query'\n  };\n\n  var ApiResponse = function ApiResponse(data, options) {\n    // Facade pattern, we want to expose only limited API\n    // despite the fact that the underlying instance has\n    // all power of the Backbone.Model\n    if (data instanceof ApiResponseImplementation) {\n      this.innerResponse = new Facade(hardenedInterface, data);\n    } else {\n      this.innerResponse = new Facade(hardenedInterface, new ApiResponseImplementation(data, options));\n    }\n  };\n\n  var toInsert = {};\n\n  _.each(_.keys(hardenedInterface), function (element, index, list) {\n    toInsert[element] = function () {\n      return this.innerResponse[element].apply(this.innerResponse, arguments);\n    };\n  });\n\n  _.extend(ApiResponse.prototype, toInsert, {\n    clone: function clone() {\n      var clone = this.innerResponse.clone.apply(this.innerResponse, arguments);\n      return new ApiResponse(clone);\n    }\n  });\n\n  return ApiResponse;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/**\n * Created by rchyla on 3/3/14.\n */\n\n//# sourceURL=webpack://bumblebee/./src/js/components/api_response.js?");

/***/ }),

/***/ "./src/js/components/api_targets.js":
/*!******************************************!*\
  !*** ./src/js/components/api_targets.js ***!
  \******************************************/
/***/ (function(module, exports) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n * Created by rchyla on 1/20/15\n *\n * contains api targets\n * and any related limits\n */\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n  var config = {\n    BOOTSTRAP: '/accounts/bootstrap',\n    SEARCH: 'search/query',\n    QTREE: 'search/qtree',\n    BIGQUERY: 'search/bigquery',\n    EXPORT: 'export/',\n    SERVICE_AUTHOR_NETWORK: 'vis/author-network',\n    SERVICE_PAPER_NETWORK: 'vis/paper-network',\n    SERVICE_WORDCLOUD: 'vis/word-cloud',\n    SERVICE_METRICS: 'metrics',\n    SERVICE_OBJECTS: 'objects',\n    SERVICE_OBJECTS_QUERY: 'objects/query',\n    SERVICE_CITATION_HELPER: 'citation_helper',\n    SERVICE_AUTHOR_AFFILIATION_EXPORT: 'authoraff',\n    MYADS_STORAGE: 'vault',\n    MYADS_NOTIFICATIONS: 'vault/_notifications',\n    AUTHOR_AFFILIATION_SEARCH: 'author-affiliation/search',\n    AUTHOR_AFFILIATION_EXPORT: 'author-affiliation/export',\n    RESOLVER: 'resolver',\n    CSRF: 'accounts/csrf',\n    USER: 'accounts/user',\n    USER_DATA: 'vault/user-data',\n    SITE_CONFIGURATION: 'vault/configuration',\n    TOKEN: 'accounts/user/token',\n    LOGIN: 'accounts/user/login',\n    LOGOUT: 'accounts/user/logout',\n    VERIFY: 'accounts/verify',\n    RESEND_VERIFY: \"accounts/user/{email}/verify\",\n    RESET_PASSWORD: 'accounts/user/reset-password',\n    CHANGE_PASSWORD: 'accounts/user/change-password',\n    CHANGE_EMAIL: 'accounts/user/change-email',\n    INFO: 'accounts/info',\n    PROTECTED: 'accounts/protected',\n    STATUS: 'accounts/status',\n    RECOMMENDER: 'recommender',\n    GRAPHICS: 'graphics',\n    FEEDBACK: 'feedback',\n    // library import from classic\n    LIBRARY_IMPORT_CLASSIC_AUTH: 'harbour/auth/classic',\n    LIBRARY_IMPORT_CLASSIC_MIRRORS: 'harbour/mirrors',\n    LIBRARY_IMPORT_CLASSIC_TO_BBB: 'biblib/classic',\n    // library import from 2.0\n    LIBRARY_IMPORT_ADS2_AUTH: 'harbour/auth/twopointoh',\n    LIBRARY_IMPORT_ADS2_TO_BBB: 'biblib/twopointoh',\n    LIBRARY_IMPORT_ZOTERO: 'harbour/export/twopointoh/zotero',\n    LIBRARY_IMPORT_MENDELEY: 'harbour/export/twopointoh/mendeley',\n    // returns credentials from both classic and 2.0 if they exist\n    LIBRARY_IMPORT_CREDENTIALS: 'harbour/user',\n    // store ADS information connected with ORCID here\n    ORCID_PREFERENCES: 'orcid/preferences',\n    ORCID_NAME: 'orcid/orcid-name',\n    // library endpoints\n    // can get info about all libraries, or list of bibcodes associated w/specific lib (libraries/id)\n    // post to /libraries/ to create a library\n    LIBRARIES: 'biblib/libraries',\n    LIBRARY_TRANSFER: 'biblib/transfer',\n    // can post, put, and delete changes to individual libs using this endpoint\n    DOCUMENTS: 'biblib/documents',\n    PERMISSIONS: 'biblib/permissions',\n    REFERENCE: 'reference/text',\n\n    /*\n     * this is used by the mixin 'user_change_rows' to set max allowed/default requested\n     */\n    _limits: {\n      // use the same name from discovery.config.js\n      ExportWidget: {\n        default: 500,\n        limit: 3000\n      },\n      Metrics: {\n        default: 7000,\n        limit: 7000\n      },\n      AuthorNetwork: {\n        default: 400,\n        limit: 1000\n      },\n      PaperNetwork: {\n        default: 400,\n        limit: 1000\n      },\n      ConceptCloud: {\n        default: 150,\n        limit: 150\n      },\n      BubbleChart: {\n        // default == limit\n        default: 1500\n      }\n    }\n  }; // add credential info\n  // doesn't require cross domain cookies\n\n  config._doesntNeedCredentials = [config.SEARCH, config.QTREE, config.BIGQUERY, config.EXPORT, config.SERVICE_AUTHOR_NETWORK, config.SERVICE_PAPER_NETWORK, config.SERVICE_WORDCLOUD, config.SERVICE_METRICS, config.RECOMMENDER, config.GRAPHICS, config.FEEDBACK];\n  return config;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//# sourceURL=webpack://bumblebee/./src/js/components/api_targets.js?");

/***/ }),

/***/ "./src/js/components/default_request.js":
/*!**********************************************!*\
  !*** ./src/js/components/default_request.js ***!
  \**********************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/**\n * Created by rchyla on 3/28/14.\n */\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! underscore */ \"./node_modules/underscore/underscore-umd.js\"), __webpack_require__(/*! backbone */ \"./src/libs/backbone.js\"), __webpack_require__(/*! js/components/api_query */ \"./src/js/components/api_query.js\"), __webpack_require__(/*! js/components/multi_params */ \"./src/js/components/multi_params.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (_, Backbone, ApiQuery, MultiParams) {\n  var basicCheck = function basicCheck(s) {\n    if (_.isString(s)) {\n      return true;\n    }\n\n    if (_.isArray(s)) {\n      var l = s.length;\n\n      for (var i = 0; i < l; i++) {\n        var x = s[i];\n\n        if (!(_.isString(x) || _.isNumber(x))) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  };\n\n  var allowedAttrs = {\n    query: function query(v) {\n      if (_.isUndefined(v)) {\n        return true;\n      }\n\n      return v instanceof ApiQuery;\n    },\n    target: basicCheck,\n    sender: basicCheck,\n    options: basicCheck\n  };\n  var checker = {\n    target: function target(s) {\n      if (s && s.substring(0, 1) !== '/') {\n        return '/' + s;\n      }\n    }\n  };\n  var Request = MultiParams.extend({\n    /**\n     * Internal method: we allow only certain keys\n     *\n     * @param attributes\n     * @param options\n     * @returns {boolean}\n     * @private\n     */\n    _validate: function _validate(attributes, options) {\n      _.forOwn(attributes, function (val, attr) {\n        var tempVal = attributes[attr];\n\n        if (!(attr in allowedAttrs)) {\n          throw new Error('Invalid attr: ' + attr);\n        }\n\n        if (!allowedAttrs[attr].call(allowedAttrs, tempVal)) {\n          throw new Error('Invalid value:key ' + attr + tempVal);\n        }\n      });\n\n      return true;\n    },\n\n    /**\n     * Modified version of the multi-valued set(); we do not insist\n     * on having the values in array\n     *\n     * @param key\n     * @param val\n     * @param options\n     * @returns {Request}\n     */\n    set: function set(key, val, options) {\n      this._checkLock();\n\n      var attrs;\n      if (key == null) return this; // Handle both `\"key\", value` and `{key: value}` -style arguments.\n\n      if (_typeof(key) === 'object') {\n        attrs = key;\n        options = val;\n      } else {\n        (attrs = {})[key] = val;\n      }\n\n      Backbone.Model.prototype.set.call(this, attrs, options);\n    },\n    // for requests, we use all components: path, query, hash\n    _checkParsed: function _checkParsed(attrs) {\n      if (_.isObject(attrs)) {\n        var ret = {};\n\n        if ('#query' in attrs && !_.isEmpty(attrs['#query'])) {\n          ret.query = new ApiQuery(attrs['#query']);\n        }\n\n        if ('#path' in attrs) {\n          ret.target = attrs['#path'][0];\n        }\n\n        if ('#hash' in attrs) {\n          _.extend(ret, _.each(attrs['#hash'], function (val, key, obj) {\n            if (val.length == 1) {\n              obj[key] = val[0];\n            }\n          }));\n        }\n\n        return ret;\n      }\n\n      return attrs;\n    },\n\n    /*\n     * Return the url string encoding all parameters that made\n     * this request. The parameters will be sorted alphabetically\n     * by their keys and URL encoded so that they can be used\n     * in requests.\n     */\n    url: function url(whatToSort) {\n      if (!whatToSort) {\n        whatToSort = this.attributes;\n      }\n\n      var target = whatToSort.target;\n      var url = target ? _.isArray(target) ? target.join('/') : target : '';\n\n      if ('query' in whatToSort) {\n        url += '?' + whatToSort.query.url();\n      }\n\n      if ('sender' in whatToSort) {\n        url += '#' + MultiParams.prototype.url.call(this, {\n          sender: whatToSort.sender\n        });\n      }\n\n      return url;\n    },\n\n    /**\n     * Re-constructs the query from the url string, returns the json attributes;\n     * cannot be used it the instance is locked\n     *\n     * @param query (String)\n     * @returns {Model}\n     */\n    load: function load(query) {\n      return MultiParams.prototype.load.call(this, query.indexOf('?') > -1 ? query : query + '?');\n    }\n  });\n  return Request;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//# sourceURL=webpack://bumblebee/./src/js/components/default_request.js?");

/***/ }),

/***/ "./src/js/components/facade.js":
/*!*************************************!*\
  !*** ./src/js/components/facade.js ***!
  \*************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n * Created by rchyla on 3/16/14. inspiration: http://jsfiddle.net/pajtai/GD5qR/35/\n */\n\n/*\n * // Interface\n *  var remoteInterface = {\n *    on: 'turn on'\n *  };\n *  // Implementation\n *  var htmlRemote = {\n *    on: function() { console.log(\"remote on\"); return this; }\n *  };\n *  // Protecting the implementation\n *  var htmlInterface = new Facade(remoteInterface, htmlRemote);\n *\n */\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! underscore */ \"./node_modules/underscore/underscore-umd.js\"), __webpack_require__(/*! js/components/facade */ \"./src/js/components/facade.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (_, Facade) {\n  // The Facade encapsulates objectIn according to the description\n  // The exposed facade is guaranteed to have exactly the functions described in description.\n  var Facade = function Facade(description, objectIn) {\n    var facade; // TODO: add enforce of \"new\"\n\n    facade = {};\n    this.mixIn(description, objectIn, facade); // TODO: check that \"mixIn\" is not taken\n\n    facade.mixIn = this.mixIn;\n    return facade;\n  };\n\n  Facade.prototype.mixIn = function (description, objectIn, facade) {\n    var property;\n    var propertyValue;\n    facade = facade || this;\n\n    for (property in description) {\n      propertyValue = description[property];\n\n      if (property in objectIn) {\n        var p = objectIn[property];\n\n        if (typeof propertyValue === 'function') {\n          // redefining the method\n          facade[property] = _.bind(propertyValue, objectIn);\n        } else if (typeof p === 'function') {\n          // exposing the method\n          facade[property] = _.bind(p, objectIn);\n        } else if (_.isUndefined(p)) {// pass\n        } else if (_.isString(p) || _.isNumber(p) || _.isBoolean(p) || _.isDate(p) || _.isNull(p) || _.isRegExp(p)) {\n          // build getter method\n          facade['get' + property.substring(0, 1).toUpperCase() + property.substring(1)] = _.bind(function () {\n            return this.ctx[this.name];\n          }, {\n            ctx: objectIn,\n            name: property\n          });\n          facade[property] = p; // copy the value (it is immutable anyways)\n        } else if (p.hasOwnProperty('__facade__') && p.__facade__) {\n          // exposing internal facade\n          facade[property] = p;\n        } else if (_.isObject(p) && 'getHardenedInstance' in p) {\n          // builds a facade\n          facade[property] = p.getHardenedInstance();\n        } else {\n          throw new Error(\"Sorry, you can't wrap '\" + property + \"': \" + p);\n        }\n      } else if (typeof propertyValue === 'function') {\n        facade[property] = _.bind(propertyValue, objectIn);\n      } else {\n        throw new Error('Unknown key: ' + property + '(' + propertyValue + ')');\n      }\n    }\n\n    if (objectIn) {\n      // .name is not supported in IE\n      // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name\n      facade.__facade__ = Boolean(objectIn.constructor ? objectIn.constructor.name ? objectIn.constructor.name : true : true);\n    } else {\n      facade.__facade__ = true;\n    } // TODO:rca - shall we use?\n    // if (Object.freeze)\n    //  facade = Object.freeze(facade);\n\n\n    return facade;\n  };\n\n  return Facade;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//# sourceURL=webpack://bumblebee/./src/js/components/facade.js?");

/***/ }),

/***/ "./src/js/components/generic_module.js":
/*!*********************************************!*\
  !*** ./src/js/components/generic_module.js ***!
  \*********************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*\n * A generic class to be used for building modules (the Marionette.Module)\n * just complicates things. For simple things, just use this class.\n */\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! backbone */ \"./src/libs/backbone.js\"), __webpack_require__(/*! underscore */ \"./node_modules/underscore/underscore-umd.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Backbone, _) {\n  // A list of options to be attached directly to the module, if provided.\n  var moduleOptions = ['className', 'activate'];\n\n  var Module = function Module(options) {\n    var defaults;\n    options = options || {};\n    this.mid = _.uniqueId('module');\n\n    _.extend(this, _.pick(options, moduleOptions));\n\n    this.initialize.call(this, options);\n  }; // every module has the Events mixin\n\n\n  _.extend(Module.prototype, Backbone.Events, {\n    className: 'GenericModule',\n    initialize: function initialize() {},\n    destroy: function destroy() {},\n    activate: function activate(options) {\n      _.extend(this, _.pick(options, moduleOptions));\n    }\n  }); // give the module subclassing functionality\n\n\n  Module.extend = Backbone.Model.extend;\n  return Module;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//# sourceURL=webpack://bumblebee/./src/js/components/generic_module.js?");

/***/ }),

/***/ "./src/js/components/json_response.js":
/*!********************************************!*\
  !*** ./src/js/components/json_response.js ***!
  \********************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*\n * A simple wrapper around the API response for ADS\n * This class is extended/enhanced by other implementations\n * (e.g. solr_response)\n */\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! underscore */ \"./node_modules/underscore/underscore-umd.js\"), __webpack_require__(/*! backbone */ \"./src/libs/backbone.js\"), __webpack_require__(/*! js/components/api_query */ \"./src/js/components/api_query.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (_, Backbone, ApiQuery) {\n  var JSONResponse = function JSONResponse(attributes, options) {\n    var defaults;\n    var attrs = attributes || {};\n    options || (options = {});\n    this.rid = _.uniqueId('r');\n    this.readOnly = options.hasOwnProperty('readOnly') ? options.readOnly : true;\n    this._url = options.hasOwnProperty('url') ? options.url : null;\n    if (options.parse) attrs = this.parse(attrs, options) || {};\n\n    if (defaults = _.result(this, 'defaults')) {\n      attrs = _.defaults({}, attrs, defaults);\n    }\n\n    this.attributes = attrs;\n    this.initialize.apply(this, arguments);\n  };\n\n  _.extend(JSONResponse.prototype, {\n    // Initialize is an empty function by default. Override it with your own\n    // initialization logic.\n    initialize: function initialize() {},\n    getApiQuery: function getApiQuery() {\n      return this.apiQuery;\n    },\n    setApiQuery: function setApiQuery(q) {\n      if (!q) {\n        return;\n      }\n\n      if (!(q instanceof ApiQuery)) {\n        throw new Error('Only ApiQuery instances accepted');\n      }\n\n      this.apiQuery = q;\n    },\n    // Return a copy of the model's `attributes` object.\n    toJSON: function toJSON(options) {\n      return this._clone(this.attributes);\n    },\n    // url string that identifies this object\n    url: function url() {\n      if (this._url) {\n        return this._url;\n      }\n\n      return this.rid; // default is just to return response id\n    },\n    set: function set(key, val, options) {\n      if (this.readOnly) {\n        throw Error(\"You can't change read-only response object\");\n      }\n\n      var parts = this._split(key);\n\n      if (parts.length == 1) {\n        this.attributes[parts[0]] = val;\n      } else {\n        var pointer = this.get(key);\n        pointer = val;\n      }\n    },\n    _split: function _split(key) {\n      var parts = [];\n      var i = 0;\n      var l = key.length;\n      var start = 0;\n      var quotes = [];\n\n      while (i < l) {\n        if (key[i] == quotes[quotes.length - 1]) {\n          quotes.pop();\n        } else if (key[i] == '\"' || key[i] == \"'\") {\n          quotes.push(key[i]);\n        } else if (key[i] == '.' && quotes.length == 0) {\n          parts.push(key.substring(start, i));\n          start = i + 1;\n        } else if (key[i] == '[' && quotes.length == 0) {\n          parts.push(key.substring(start, i));\n          parts.push(key.substring(i, key.indexOf(']', i + 1) + 1));\n          start = i = key.indexOf(']', i + 1) + 1;\n        }\n\n        i += 1;\n      }\n\n      if (start < l) {\n        parts.push(key.substring(start));\n      } // console.log(key, parts);\n\n\n      return parts;\n    },\n    has: function has(key) {\n      return this.get(key, true);\n    },\n    get: function get(key, justCheck, defaultValue) {\n      // if key empty, return everything\n      if (!key) {\n        return this._clone(this.attributes);\n      }\n\n      var parts = this._split(key);\n\n      var found = [];\n      var pointer = this.attributes;\n\n      while (parts.length > 0) {\n        var k = parts.shift();\n\n        if (pointer.hasOwnProperty(k)) {\n          pointer = pointer[k];\n          found.push(k);\n        } else if (k.indexOf('[') > -1) {\n          // foo['something'] or foo[0]\n          var m = k.trim().substring(1, k.length - 1);\n\n          if ((m.indexOf('\"') > -1 || m.indexOf(\"'\") > -1) && pointer.hasOwnProperty(m.substring(1, m.length - 1))) {\n            // object property access\n            pointer = pointer[m.substring(1, m.length - 1)];\n            found.push(m);\n          } else if (_.isArray(pointer)) {\n            var ix = null;\n\n            try {\n              ix = parseInt(m);\n\n              if (_.isNaN(ix) || pointer.length <= ix || ix < 0) {\n                if (justCheck) {\n                  return false;\n                }\n\n                if (typeof defaultValue !== 'undefined') {\n                  return defaultValue;\n                }\n\n                throw new Error();\n              }\n\n              pointer = pointer[ix];\n              found.push(m);\n            } catch (e) {\n              if (justCheck) {\n                return false;\n              }\n\n              if (typeof defaultValue !== 'undefined') {\n                return defaultValue;\n              }\n\n              throw new Error(\"Can't find: \" + key + (found.length > 0 ? ' (worked up to: ' + found.join('.') + ')' : ''));\n            }\n          } else {\n            if (justCheck) {\n              return false;\n            }\n\n            if (typeof defaultValue !== 'undefined') {\n              return defaultValue;\n            }\n\n            throw new Error(\"Can't find: \" + key + (found.length > 0 ? ' (worked up to: ' + found.join('.') + ')' : ''));\n          }\n        } else {\n          if (justCheck) {\n            return false;\n          }\n\n          if (typeof defaultValue !== 'undefined') {\n            return defaultValue;\n          }\n\n          throw new Error(\"Can't find: \" + key + (found.length > 0 ? ' (worked up to: ' + found.join('.') + ')' : ''));\n        }\n      }\n\n      if (justCheck) {\n        return true;\n      }\n\n      return this._clone(pointer);\n    },\n    clone: function clone() {\n      return new this.constructor(this.attributes);\n    },\n    // creates a copy of the requested elements\n    _clone: function _clone(elem) {\n      if (!this.readOnly || !_.isObject(elem)) {\n        return elem;\n      }\n\n      if (_.cloneDeep) {\n        // lodash\n        return _.cloneDeep(elem);\n      }\n\n      return JSON.parse(JSON.stringify(elem));\n    },\n    isLocked: function isLocked() {\n      return this.readOnly;\n    },\n    lock: function lock() {\n      return this.readOnly = true;\n    },\n    unlock: function unlock() {\n      return this.readOnly = false;\n    }\n  }); // use the bb extend function for classes hierarchy\n\n\n  JSONResponse.extend = Backbone.Model.extend;\n  return JSONResponse;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/**\n * Created by rchyla on 3/3/14.\n */\n\n//# sourceURL=webpack://bumblebee/./src/js/components/json_response.js?");

/***/ }),

/***/ "./src/js/components/multi_params.js":
/*!*******************************************!*\
  !*** ./src/js/components/multi_params.js ***!
  \*******************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/*\n multi_params is a generic class to store any parameters;\n it is backed by BB.Model and has all the functionality\n the values are always stored as an array of values; so\n even if you try to set strings, you will always have\n list of strings\n */\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! backbone */ \"./src/libs/backbone.js\"), __webpack_require__(/*! underscore */ \"./node_modules/underscore/underscore-umd.js\"), __webpack_require__(/*! jquery */ \"./src/libs/jquery.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Backbone, _, $) {\n  var Model = Backbone.Model.extend({\n    locked: false,\n    _checkLock: function _checkLock() {\n      if (this.locked === true) {\n        throw Error('Object locked for modifications');\n      }\n    },\n    isLocked: function isLocked() {\n      return this.locked;\n    },\n    lock: function lock() {\n      this.locked = true;\n    },\n    unlock: function unlock() {\n      this.locked = false;\n    },\n    clone: function clone() {\n      if (this.isLocked()) {\n        var c = new this.constructor(this.attributes);\n        c.lock();\n        return c;\n      }\n\n      return new this.constructor(this.attributes);\n    },\n    hasVal: function hasVal(key) {\n      return !_.isEmpty(this.get(key));\n    },\n    // we allow only strings and numbers; instead of sending\n    // signal we throw a direct error\n    _validate: function _validate(attributes, options) {\n      // check we have only numbers and/or finite numbers\n      for (var attr in attributes) {\n        if (!_.isString(attr)) {\n          throw new Error('Keys must be strings, not: ' + attr);\n        } // remove empty strings\n\n\n        var tempVal = attributes[attr];\n        tempVal = _.without(_.flatten(tempVal), '', false, null, undefined, NaN);\n\n        if (!_.isArray(tempVal)) {\n          throw new Error('Values were not converted to an Array');\n        }\n\n        if (_.isEmpty(tempVal) && options.unset !== true) {\n          throw new Error('Empty values not allowed');\n        }\n\n        if (!_.every(tempVal, function (v) {\n          return _.isString(v) || _.isNumber(v) && !_.isNaN(v);\n        })) {\n          throw new Error('Invalid value (not a string or number): ' + tempVal);\n        }\n\n        attributes[attr] = tempVal;\n      }\n\n      return true;\n    },\n    // Every value is going to be multi-valued by default\n    // in this way we can treat all objects in the same way\n    set: function set(key, val, options) {\n      this._checkLock();\n\n      var attrs;\n      if (key == null) return this; // Handle both `\"key\", value` and `{key: value}` -style arguments.\n\n      if (_typeof(key) === 'object') {\n        attrs = key;\n        options = val;\n      } else {\n        (attrs = {})[key] = val;\n      }\n\n      for (var attr in attrs) {\n        var tempVal = attrs[attr]; // convert to array if necessary\n\n        if (!_.isArray(tempVal)) {\n          attrs[attr] = _.flatten([tempVal]);\n        }\n      }\n\n      Backbone.Model.prototype.set.call(this, attrs, options);\n    },\n    unset: function unset() {\n      this._checkLock();\n\n      Backbone.Model.prototype.unset.apply(this, arguments);\n    },\n    // adds values to existing (like set, but keeps the old vals)\n    add: function add(key, val, options) {\n      this._checkLock();\n\n      var attrs;\n      if (key == null) return this; // Handle both `\"key\", value` and `{key: value}` -style arguments.\n\n      if (_typeof(key) === 'object') {\n        attrs = key;\n        options = val;\n      } else {\n        (attrs = {})[key] = val;\n      }\n\n      for (var attr in attrs) {\n        var tempVal = attrs[attr]; // convert to array if necessary\n\n        if (!_.isArray(tempVal)) {\n          tempVal = _.flatten([tempVal]);\n        }\n\n        if (this.has(attr)) {\n          tempVal = _.clone(this.get(attr)).concat(tempVal);\n        }\n\n        attrs[attr] = tempVal;\n      }\n\n      Backbone.Model.prototype.set.call(this, attrs, options);\n    },\n    // synchronization is disabled\n    sync: function sync() {\n      throw Error('MultiParams cannot be saved to server');\n    },\n\n    /*\n     * Return the url string encoding all parameters that made\n     * this query. The parameters will be sorted alphabetically\n     * by their keys and URL encoded so that they can be used\n     * in requests.\n     */\n    url: function url(whatToSort) {\n      if (!whatToSort) {\n        whatToSort = this.attributes;\n      } // sort keys alphabetically\n\n\n      var sorted = _.pairs(whatToSort).sort(function (a, b) {\n        return a[0] > b[0] ? 1 : a[0] < b[0] ? -1 : 0;\n      }); // June1:rca - I need to preserve order of values (becuaes of the query modifications/updates) the logic\n      // just requires us to be careful and we need order to be preserved when the query is cloned\n      // also sort values\n      // var s = {};\n      // sorted.map(function(item) { s[item[0]] = (_.isArray(item[1]) ? item[1].sort() : item[1]) });\n      // we have to double encode certain elements\n      // sorted = _.map(sorted, function(pair) { return [pair[0], _.map(pair[1], function(v) {return (v.indexOf && v.indexOf('=') > -1) ? encodeURIComponent(v) : v })]});\n      // use traditional encoding\n      // use %20 instead of + (url encoding instead of form encoding)\n\n\n      var encoded = $.param(_.object(sorted), true);\n      encoded = encoded.replace(/\\+/g, '%20'); // Replace funky unicode quotes with normal ones\n\n      encoded = encoded.replace(/%E2%80%9[ECD]/g, '%22');\n      return encoded;\n    },\n\n    /**\n     * Parses string (urlparams) and returns it as an object\n     * @param resp\n     * @param options\n     * @returns {*}\n     */\n    parse: function parse(resp, options) {\n      if (_.isString(resp)) {\n        var attrs = {};\n        resp = decodeURI(resp);\n\n        if (resp.indexOf('?') > -1) {\n          attrs['#path'] = [resp.slice(0, resp.indexOf('?'))];\n          resp = resp.slice(resp.indexOf('?') + 1);\n        }\n\n        if (resp.indexOf('#') > -1) {\n          attrs['#hash'] = this._parse(resp.slice(resp.indexOf('#') + 1));\n          resp = resp.slice(0, resp.indexOf('#'));\n        }\n\n        attrs['#query'] = this._parse(resp);\n        return this._checkParsed(attrs);\n      }\n\n      return this._checkParsed(resp); // else return resp object\n    },\n    _parse: function _parse(resp) {\n      var attrs = {};\n      var hash;\n\n      if (!resp.trim()) {\n        return attrs;\n      }\n\n      var hashes = resp.slice(resp.indexOf('?') + 1).split('&'); // resp = decodeURIComponent(resp);\n\n      var key;\n      var value;\n\n      for (var i = 0; i < hashes.length; i++) {\n        hash = hashes[i].split('=');\n        key = decodeURIComponent(hash[0].split('+').join(' ')); // optimized: .replace(/\\+/g, \" \")\n\n        var vall = hash[1];\n\n        if (hash.length > 2) {\n          hash.shift();\n          vall = hash.join('=');\n        } // replace literal '%' with code and '+' become literal spaces\n\n\n        value = decodeURIComponent(vall.replace(/%(?!\\d|[ABCDEF]+)/gi, '%25').split('+').join(' '));\n\n        if (attrs[key] !== undefined) {\n          attrs[key].push(value);\n        } else {\n          attrs[key] = [value];\n        }\n      }\n\n      return attrs;\n    },\n    // default behaviour is just to keep the query parameters\n    // after the string was parsed, you can override it to suit other needs\n    _checkParsed: function _checkParsed(attrs) {\n      if (_.isObject(attrs)) {\n        if ('#query' in attrs) {\n          return attrs['#query'];\n        }\n      }\n\n      return attrs;\n    },\n\n    /**\n     * Re-constructs the query from the url string, returns the json attributes;\n     * cannot be used it the instance is locked\n     *\n     * @param query (String)\n     * @returns {Model}\n     */\n    load: function load(query) {\n      this._checkLock();\n\n      var vals = this.parse(query);\n      this.clear();\n      this.set(vals);\n      return this;\n    }\n  });\n  return Model;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//# sourceURL=webpack://bumblebee/./src/js/components/multi_params.js?");

/***/ }),

/***/ "./src/js/components/pubsub_events.js":
/*!********************************************!*\
  !*** ./src/js/components/pubsub_events.js ***!
  \********************************************/
/***/ (function(module, exports) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n * Created by rchyla on 3/30/14.\n */\n\n/**\n * Catalogue of PubSub events; we assume this:\n *\n *  - FC = the component lives in the 'Forbidden City'\n *         inside Application, typically this is a PubSub or Api, Mediator\n *         or any component with elevated access\n *\n *  - OC = Outer City: the suburbs of the application; these are typically\n *         UI components (behind the wall), untrusted citizens of the\n *         BumbleBee state\n *\n *  WARNING: do not use spaces; events with spaces are considered to be\n *        multiple events! (e.g. '[PubSub] New-Query' will be two events)\n *\n */\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n  var PubSubEvents = {\n    /**\n     * Usually called by OC's as a first step in the query processing.\n     * It means: 'user did something', we need to start reacting. The OC\n     * will build a new ApiQuery and send it together with this event\n     */\n    START_SEARCH: '[PubSub]-New-Query',\n\n    /**\n     * Called by FC's (usually: Mediator) - this is a signal to *all* OC's\n     * they should receive ApiQuery object, compare it against their\n     * own query; find diff and create a new ApiRequest (asking for a data)\n     * and send that back\n     */\n    INVITING_REQUEST: '[PubSub]-Inviting-Request',\n\n    /**\n     * Will be called by OC's, this is response to ApiQuery input.\n     */\n    DELIVERING_REQUEST: '[PubSub]-New-Request',\n\n    /**\n     * Will be called by OC's, this is one-time forget action (outside of the\n     * the search cycle); use this for any query that needs to be executed\n     * and not be tracked by search cycle\n     */\n    EXECUTE_REQUEST: '[PubSub]-Execute-Request',\n\n    /**\n     * Called from the router, the QID will be passed; the query needs to be\n     * loaded and executed\n     */\n    EXECUTE_STORED_QUERY: '[PubSub]-Execute-Stored-Query',\n\n    /**\n     * Published by FC's - typically Mediator - when a response has been retrieved\n     * for a given ApiRequest.\n     *\n     * OC's should subscribe to this event when they want to receive data\n     * from the treasury (api)\n     *\n     *  - input: ApiRequest\n     *  - output: ApiResponse\n     */\n    DELIVERING_RESPONSE: '[PubSub]-New-Response',\n\n    /**\n     * The walls of the FC are being closed; and no new requests will be served\n     */\n    CLOSING_GATES: '[PubSub]-Closing',\n\n    /**\n     * PubSub will not receive any requests any more\n     */\n    CLOSED_FOR_BUSINESS: '[PubSub]-Closed',\n\n    /**\n     * ForbiddenCity is about to receive requests\n     */\n    OPENING_GATES: '[PubSub]-Opening',\n\n    /**\n     * Called after PubSub became ready - it is fully operational\n     */\n    OPEN_FOR_BUSINESS: '[PubSub]-Ready',\n\n    /**\n     *  Set of error warnings issues by PubSub - or by some other FC's - to\n     *  deal with congestion or other problems\n     */\n    SMALL_FIRE: '[PubSub]-Problem',\n    BIG_FIRE: '[PubSub]-Big-Problem',\n    CITY_BURNING: '[PubSub]-Disaster',\n\n    /**\n     * A message containing feedback from the FC; traveling towards OC\n     * The feedback will be instance of ApiFeedback\n     */\n    FEEDBACK: '[FC]-FeedBack',\n\n    /**\n     * A message from the router requesting showing citizens of the\n     * city\n     */\n    DISPLAY_DOCUMENTS: '[Router]-Display-Documents',\n    DISPLAY_DOCUMENTS_DETAILS: '[Router]-Display-Documents-Details',\n\n    /**\n     * Used by OC to request parsed query tree - to check a query\n     * for example\n     */\n    GET_QTREE: '[FC]-GetQTree',\n    NAVIGATE: '[Router]-Navigate-With-Trigger',\n\n    /*\n     * so navigator can notify interested widgets about a change\n     * from search page to user page, for instance-- navigator cannot\n     * to this since it listens to many events including widget-show events\n     * */\n    PAGE_CHANGE: '[Navigator]Page-Changed',\n\n    /* for custom widget-to-widget events */\n    CUSTOM_EVENT: '[PubSub]-Custom-Event',\n    ARIA_ANNOUNCEMENT: '[PubSub]-Aria-Announcement',\n\n    /* anything to do with changing the state of the user, including session events */\n    USER_ANNOUNCEMENT: '[PubSub]-User-Announcement',\n\n    /**\n     * A message/action that should be displayed to the user (on prominent)\n     * place\n     */\n    ALERT: '[Alert]-Message',\n    ORCID_ANNOUNCEMENT: '[PubSub]-Orcid-Announcement',\n\n    /**\n     * Happens during the main cycle of the application birth\n     *  LOADED = when all components were successfuly loaded\n     *  BOOTSTRAPPED = + when all dynamic config was loaded\n     *  STARTING = + right before the router and history objects start()\n     *  STARTED = app is alive and handling requests\n     */\n    APP_LOADED: '[App]-Application-Loaded',\n    APP_BOOTSTRAPPED: '[App]-Application-Bootstrapped',\n    APP_STARTING: '[App]-Application-Starting',\n    APP_STARTED: '[App]-Application-Started',\n    APP_EXIT: '[App]-Exit',\n\n    /**\n     * Is triggered when user selects/deselects records\n     */\n    PAPER_SELECTION: '[User]-Paper-Selection',\n    // instead of toggling, adds all papers\n    BULK_PAPER_SELECTION: '[User]-Bulk-Paper-Selection',\n\n    /*\n     * is triggered by app storage itself when list of selected papers changes\n     * */\n    STORAGE_PAPER_UPDATE: '[User]-Paper-Update',\n    LIBRARY_CHANGE: '[PubSub]-Library-Change'\n  };\n  return PubSubEvents;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//# sourceURL=webpack://bumblebee/./src/js/components/pubsub_events.js?");

/***/ }),

/***/ "./src/js/components/pubsub_key.js":
/*!*****************************************!*\
  !*** ./src/js/components/pubsub_key.js ***!
  \*****************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n * Created by rchyla on 3/14/14.\n */\n\n/*\n * A simple, yet important, class - every subscriber\n * to the PubSub must contain one key. This class\n * should be instantiated in a safe manner. ie.\n *\n * PubSubKey.newInstance({creator: this});\n *\n * But beware that as long as the subscriber is alive\n * reference to the creator will be saved inside\n * the key! So choose carefully whether you use this\n * functionality\n */\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! underscore */ \"./node_modules/underscore/underscore-umd.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (_) {\n  var PubSubKey = function PubSubKey(options) {\n    _.extend(this, options);\n  };\n\n  _.extend(PubSubKey, {\n    /*\n     * Creates a new Instances of the PubSubKey\n     * with a storage that cannot be changed.\n     * To double sign the key, you can pass\n     * an object that identifies creator of the\n     * key and test identity, eg.\n     *\n     * var creator = {};\n     * var k = PubSubKey(creator);\n     * k.getCreator() === k;\n     *\n     */\n    newInstance: function newInstance(options) {\n      var priv = {\n        id: _.has(options, 'id') ? options.id : _.uniqueId(':psk'),\n        creator: _.has(options, 'creator') ? options.creator : null\n      };\n      return new PubSubKey({\n        getId: function getId() {\n          return priv.id;\n        },\n        getCreator: function getCreator() {\n          return priv.creator;\n        }\n      });\n    }\n  });\n\n  return PubSubKey;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//# sourceURL=webpack://bumblebee/./src/js/components/pubsub_key.js?");

/***/ }),

/***/ "./src/js/components/query_mediator.js":
/*!*********************************************!*\
  !*** ./src/js/components/query_mediator.js ***!
  \*********************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n * Created by rchyla on 3/30/14.\n */\n\n/**\n * Mediator to coordinate UI-query exchange\n */\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! underscore */ \"./node_modules/underscore/underscore-umd.js\"), __webpack_require__(/*! jquery */ \"./src/libs/jquery.js\"), __webpack_require__(/*! cache */ \"./src/libs/cache.js\"), __webpack_require__(/*! js/components/generic_module */ \"./src/js/components/generic_module.js\"), __webpack_require__(/*! js/mixins/dependon */ \"./src/js/mixins/dependon.js\"), __webpack_require__(/*! js/mixins/add_secondary_sort */ \"./src/js/mixins/add_secondary_sort.js\"), __webpack_require__(/*! js/components/api_request */ \"./src/js/components/api_request.js\"), __webpack_require__(/*! js/components/api_response */ \"./src/js/components/api_response.js\"), __webpack_require__(/*! js/components/api_query_updater */ \"./src/js/components/api_query_updater.js\"), __webpack_require__(/*! js/components/api_feedback */ \"./src/js/components/api_feedback.js\"), __webpack_require__(/*! js/components/json_response */ \"./src/js/components/json_response.js\"), __webpack_require__(/*! js/components/api_targets */ \"./src/js/components/api_targets.js\"), __webpack_require__(/*! js/components/api_query */ \"./src/js/components/api_query.js\"), __webpack_require__(/*! js/components/alerts */ \"./src/js/components/alerts.js\"), __webpack_require__(/*! utils */ \"./src/js/utils.js\"), __webpack_require__(/*! analytics */ \"./src/js/components/analytics.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (_, $, Cache, GenericModule, Dependon, SecondarySort, ApiRequest, ApiResponse, ApiQueryUpdater, ApiFeedback, JsonResponse, ApiTargets, ApiQuery, Alerts, utils, analytics) {\n  var QueryMediator = GenericModule.extend({\n    initialize: function initialize(options) {\n      options = options || {};\n      this._cache = null;\n      this.debug = options.debug || false;\n      this.queryUpdater = new ApiQueryUpdater('QueryMediator');\n      this.failedRequestsCache = this._getNewCache({\n        expiresAfterWrite: 5\n      });\n      this.maxRetries = options.maxRetries || 3;\n      this.recoveryDelayInMs = _.isNumber(options.recoveryDelayInMs) ? options.recoveryDelayInMs : 700;\n      this.__searchCycle = {\n        waiting: {},\n        inprogress: {},\n        done: {},\n        failed: {}\n      };\n      this.shortDelayInMs = _.isNumber(options.shortDelayInMs) ? options.shortDelayInMs : 300;\n      this.longDelayInMs = _.isNumber(options.longDelayInMs) ? options.longDelayInMs : 100;\n      this.monitoringDelayInMs = _.isNumber(options.monitoringDelayInMs) ? options.monitoringDelayInMs : 200;\n      this.mostRecentQuery = new ApiQuery();\n    },\n    activateCache: function activateCache(options) {\n      this._cache = this._getNewCache((options || {}).cache);\n    },\n    _getNewCache: function _getNewCache(options) {\n      return new Cache(_.extend({\n        maximumSize: 100,\n        expiresAfterWrite: 60 * 30 // 30 mins\n\n      }, _.isObject(options) ? options : {}));\n    },\n\n    /**\n     * Starts listening on the PubSub\n     *\n     * @param beehive - the full access instance; we excpect PubSub to be\n     *    present\n     */\n    activate: function activate(beehive, app) {\n      this.setBeeHive(beehive);\n      this.setApp(app);\n      var pubsub = this.getPubSub(); // if you run discovery-mediator; this signal may be removed from the\n      // queue (and instead, the discovery mediator will serve the request)\n\n      pubsub.subscribe(pubsub.START_SEARCH, _.bind(this.getQueryAndStartSearchCycle, this));\n      pubsub.subscribe(pubsub.DELIVERING_REQUEST, _.bind(this.receiveRequests, this));\n      pubsub.subscribe(pubsub.EXECUTE_REQUEST, _.bind(this.executeRequest, this));\n      pubsub.subscribe(pubsub.GET_QTREE, _.bind(this.getQTree, this));\n    },\n    getQTree: function getQTree(apiQuery, senderKey) {\n      var apiRequest = new ApiRequest({\n        query: apiQuery,\n        target: ApiTargets.QTREE\n      });\n\n      this._executeRequest(apiRequest, senderKey);\n    },\n    doQueryTranslation: function doQueryTranslation(q) {\n      var d = $.Deferred();\n      var pubsub = this.getPubSub();\n      var options = {\n        type: 'POST',\n        contentType: 'application/json'\n      }; // Send the entire query to the \"query\" endpoint of the \"object_service\" micro service\n      // this endpoint will grab the \"object:<expression>\" from the query string and send back\n      // a translated query string which will have \"simbid:<expression with SIMBAD identifiers>\"\n      // instead of the \"object:\" part\n\n      var request = new ApiRequest({\n        target: ApiTargets.SERVICE_OBJECTS_QUERY,\n        query: new ApiQuery({\n          query: q\n        }),\n        options: options\n      }); // when the promise gets resolved, it will have the JSON response of the micro service\n      // which will have the translated object query\n\n      pubsub.subscribeOnce(pubsub.DELIVERING_RESPONSE, function (response) {\n        d.resolve(response.toJSON());\n      });\n      pubsub.publish(pubsub.EXECUTE_REQUEST, request);\n      return d.promise();\n    },\n    getQueryAndStartSearchCycle: function getQueryAndStartSearchCycle(apiQuery, senderKey) {\n      var that = this;\n      var ps = this.getPubSub(); // modifies apiQuery in place\n\n      SecondarySort.addSecondarySort(apiQuery); // Watch for simbid references and use a masked version of the\n      // query to generate the url if any are found.\n\n      if (this.original_url && apiQuery.get('q') && apiQuery.get('q')[0].indexOf('simbid') !== -1) {\n        var newQ = apiQuery.clone();\n        var origQ = apiQuery.get('q')[0];\n\n        if (apiQuery.has('__original_query')) {\n          origQ = apiQuery.get('__original_query')[0];\n        } // Use the old query for the clone's query string, then get url\n\n\n        newQ.set('q', origQ);\n        this.original_url = this.queryUpdater.clean(newQ).url();\n      } else {\n        this.original_url = this.queryUpdater.clean(apiQuery).url();\n      }\n\n      this.original_query = apiQuery.get('q'); // checking if it's a new big query\n\n      if (apiQuery.get('__bigquery')) {\n        apiQuery.set('bigquery', 'bibcode\\n' + apiQuery.get('__bigquery').join('\\n')); // don't need this anymore\n\n        apiQuery.unset('__bigquery'); // query might have a q, otherwise q is everything\n\n        if (!apiQuery.get('q')) apiQuery.set('q', '*:*'); // bigquery endpoint needs this value set\n\n        apiQuery.add('fq', '{!bitset}');\n        var request = new ApiRequest({\n          target: ApiTargets.MYADS_STORAGE + '/query',\n          query: apiQuery,\n          options: {\n            type: 'POST',\n            contentType: 'application/json',\n            done: function done(response) {\n              var newQuery = new ApiQuery({\n                q: apiQuery.get('q'),\n                __qid: response.qid\n              });\n              var bigquerySource = apiQuery.get('__bigquerySource');\n\n              if (bigquerySource) {\n                newQuery.set('__bigquerySource', bigquerySource[0]);\n              }\n\n              if (apiQuery.get('sort')) {\n                newQuery.set('sort', apiQuery.get('sort'));\n              }\n\n              that.startSearchCycle(newQuery, senderKey);\n            },\n            fail: function fail(jqXHR, textStatus, errorThrown) {\n              console.warn('bigquery failed:', [].slice.apply(arguments).join(','));\n              ps.publish(ps.FEEDBACK, new ApiFeedback({\n                code: ApiFeedback.CODES.SEARCH_CYCLE_FAILED_TO_START,\n                error: {\n                  jqXHR: jqXHR,\n                  textStatus: textStatus,\n                  errorThrown: errorThrown\n                }\n              }));\n            }\n          }\n        }); // it needs to be a bigquery, we need to formulate the query\n\n        this.getBeeHive().getService('Api').request(request);\n      } // check if this is an \"object:\" query\n      else if (apiQuery.get('q')[0].indexOf('object:') > -1) {\n        // we have an \"object:\" query as part of the query\n        // first define a callback function to process the response of the micro service\n        // and bind it to \"this\" so that we can use the trigger\n        var callback = function (v) {\n          apiQuery.set({\n            q: v.query\n          });\n          this.startSearchCycle(apiQuery, senderKey);\n        }.bind(this); // call the callback function when the promise has been resolved\n\n\n        this.doQueryTranslation(apiQuery.get('q')[0]).done(callback);\n      } else {\n        this.startSearchCycle.apply(this, arguments);\n      }\n    },\n\n    /**\n     * Happens at the beginning of the new search cycle. This is the 'race started' signal\n     */\n    startSearchCycle: function startSearchCycle(apiQuery, senderKey) {\n      this.resetFailures(); // we have to clear selected records in app storage here too\n\n      if (this.getBeeHive().getObject('AppStorage')) {\n        this.getBeeHive().getObject('AppStorage').clearSelectedPapers();\n      } // clear bigqueries by default when a new search cycle is started, unless\n      // explicitly saved by using \"__saveBigQuery\" flag\n\n\n      if (apiQuery.has('__saveBigQuery') && this.mostRecentQuery.has('__qid') && !apiQuery.has('__qid')) {\n        this.mostRecentQuery.set('q', apiQuery.get('q'));\n        apiQuery = this.mostRecentQuery;\n      }\n\n      this.mostRecentQuery = apiQuery;\n\n      if (this.debug) {\n        console.log('[QM]: received query:', this.hasApp() ? this.getApp().getPluginOrWidgetName(senderKey.getId()) || senderKey.getId() : senderKey.getId(), apiQuery.url());\n      }\n\n      if (apiQuery.keys().length <= 0) {\n        console.error('[QM] : received empty query (huh?!)');\n        return;\n      }\n\n      if (apiQuery.get('q')[0].indexOf('simbid') > -1) {\n        apiQuery.add('__original_url', this.original_url);\n        apiQuery.add('__original_query', this.original_query);\n      }\n\n      var ps = this.getPubSub();\n\n      if (this.__searchCycle.running && this.__searchCycle.waiting && _.keys(this.__searchCycle.waiting)) {\n        console.error('The previous search cycle did not finish, and there already comes the next!'); // mark all current waiting requests with a STALE flag\n\n        _.forEach(_.extend({}, this.__searchCycle.waiting, this.__searchCycle.inprogress), function (psks) {\n          psks.request.__STALE = true;\n        });\n      }\n\n      this.reset();\n      this.__searchCycle.initiator = senderKey.getId();\n      this.__searchCycle.collectingRequests = true;\n      this.__searchCycle.query = apiQuery.clone(); // we will protect the query -- in the future i can consider removing 'unlock' to really\n      // cement the fact the query MUST NOT be changed (we want to receive a modified version)\n\n      var q = apiQuery.clone(); // q = this.queryUpdater.clean(q);\n      // since widgets are dirty bastards, we will remove the fl parameter (to avoid cross-\n      // contamination)\n\n      q.unset('fl');\n      q.lock();\n      ps.publish(ps.INVITING_REQUEST, q); // give widgets some time to submit their requests\n\n      var self = this;\n\n      var startExecuting = function startExecuting() {\n        self.__searchCycle.collectingRequests = false;\n        self.startExecutingQueries() && self.monitorExecution();\n      };\n\n      this.shortDelayInMs ? setTimeout(startExecuting, this.shortDelayInMs) : startExecuting();\n    },\n\n    /**\n     * Starts executing queries from the search cycle\n     *\n     * Return value indicates whether the process starter;\n     * if 'true', then you can start monitoring\n     *\n     * @param force\n     */\n    startExecutingQueries: function startExecutingQueries(force) {\n      var self = this;\n      var cycle = this.__searchCycle;\n      if (cycle.running) return; // safety barrier\n\n      if (_.isEmpty(cycle.waiting)) return;\n      if (!this.hasBeeHive()) return;\n      cycle.running = true;\n      var data;\n      var beehive = this.getBeeHive();\n      var api = beehive.getService('Api');\n      var ps = this.getPubSub();\n      if (!(ps && api)) return; // application is gone\n\n      var app = this.getApp();\n      var pskToExecuteFirst;\n\n      if (pskToExecuteFirst = app.getPskOfPluginOrWidget('widget:Results')) {\n        // pick a request that will be executed first\n        if (cycle.waiting[pskToExecuteFirst]) {\n          data = cycle.waiting[pskToExecuteFirst];\n          delete cycle.waiting[pskToExecuteFirst];\n        }\n      }\n\n      if (!data && cycle.waiting[cycle.initiator]) {\n        // grab the query/request which started the cycle\n        data = cycle.waiting[cycle.initiator];\n        delete cycle.waiting[cycle.initiator];\n      }\n\n      if (!data) {\n        if (this.debug) console.warn('DynamicConfig does not tell us which request to execute first (grabbing random one).');\n        var kx;\n        data = cycle.waiting[kx = _.keys(cycle.waiting)[0]];\n        delete cycle.waiting[kx];\n      } // execute the first search (if it succeeds, fire the rest)\n\n\n      var firstReqKey = data.key.getId();\n      cycle.inprogress[firstReqKey] = data;\n\n      this._executeRequest(data.request, data.key).done(function (resOrPromise) {\n        var sendStartCycleEvent = function sendStartCycleEvent(response) {\n          if (data.request.__STALE) {\n            return;\n          }\n\n          cycle.done[firstReqKey] = data;\n          delete cycle.inprogress[firstReqKey];\n          var numFound;\n\n          if (response.response && response.response.numFound) {\n            numFound = response.response.numFound;\n          }\n\n          ps.publish(ps.FEEDBACK, new ApiFeedback({\n            code: ApiFeedback.CODES.SEARCH_CYCLE_STARTED,\n            query: cycle.query,\n            request: data.request,\n            numFound: numFound,\n            cycle: cycle,\n            response: response // this is a raw response (and it is save to send, cause it was already copied by the first 'done' callback\n\n          }));\n          self.displayTugboatMessages();\n        };\n\n        if (resOrPromise.then) {\n          Promise.resolve(resOrPromise).then(function (response) {\n            sendStartCycleEvent(response);\n          });\n        } else {\n          sendStartCycleEvent(resOrPromise);\n        } // after we are done with the first query, start executing other queries\n\n\n        var f = function f() {\n          _.each(_.keys(cycle.waiting), function (k) {\n            data = cycle.waiting[k];\n            delete cycle.waiting[k];\n            cycle.inprogress[k] = data;\n            var psk = k;\n\n            self._executeRequest.call(self, data.request, data.key).done(function () {\n              if (data.request.__STALE) {\n                return;\n              }\n\n              cycle.done[psk] = cycle.inprogress[psk];\n              delete cycle.inprogress[psk];\n            }).fail(function () {\n              if (data.request.__STALE) {\n                return;\n              }\n\n              cycle.failed[psk] = cycle.inprogress[psk];\n              delete cycle.inprogress[psk];\n            }).always(function () {\n              if (cycle.finished) return;\n\n              if (_.isEmpty(cycle.inprogress)) {\n                ps.publish(ps.FEEDBACK, new ApiFeedback({\n                  code: ApiFeedback.CODES.SEARCH_CYCLE_FINISHED,\n                  cycle: cycle\n                }));\n                cycle.finished = true;\n              }\n            });\n          });\n        }; // for the display experience, it is better to introduce delays\n\n\n        if (self.longDelayInMs && self.longDelayInMs > 0) {\n          setTimeout(function () {\n            f();\n          }, self.longDelayInMs);\n        } else {\n          f();\n        }\n      }).fail(function (jqXHR, textStatus, errorThrown) {\n        self.__searchCycle.error = true;\n        ps.publish(ps.FEEDBACK, new ApiFeedback({\n          code: ApiFeedback.CODES.SEARCH_CYCLE_FAILED_TO_START,\n          cycle: cycle,\n          request: this.request,\n          error: {\n            jqXHR: jqXHR,\n            textStatus: textStatus,\n            errorThrown: errorThrown\n          }\n        }));\n      });\n\n      return true; // means that the process can be monitored\n    },\n    monitorExecution: function monitorExecution() {\n      if (!this.hasBeeHive()) return; // app is closed\n\n      var self = this;\n      var ps = this.getPubSub();\n      if (!ps) return; // application is gone\n\n      this.__searchCycle.monitor += 1;\n\n      if (this.__searchCycle.monitor > 100) {\n        console.warn('Stopping monitoring of queries, it is running too long');\n        ps.publish(ps.FEEDBACK, new ApiFeedback({\n          code: ApiFeedback.CODES.SEARCH_CYCLE_STOP_MONITORING,\n          cycle: this.__searchCycle\n        }));\n        return;\n      }\n\n      if (this.__searchCycle.inprogress && _.isEmpty(this.__searchCycle.inprogress)) {\n        if (this.__searchCycle.finished) return; // it was already signalled\n\n        ps.publish(ps.FEEDBACK, new ApiFeedback({\n          code: ApiFeedback.CODES.SEARCH_CYCLE_FINISHED,\n          cycle: this.__searchCycle\n        }));\n        return;\n      }\n\n      var lenToDo = _.keys(this.__searchCycle.waiting).length;\n\n      var lenDone = _.keys(this.__searchCycle.done).length;\n\n      var lenInProgress = _.keys(this.__searchCycle.inprogress).length;\n\n      var lenFailed = _.keys(this.__searchCycle.failed).length;\n\n      var total = lenToDo + lenDone + lenInProgress + lenFailed;\n      ps.publish(ps.FEEDBACK, new ApiFeedback({\n        code: ApiFeedback.CODES.SEARCH_CYCLE_PROGRESS,\n        msg: lenToDo / total,\n        total: total,\n        todo: lenToDo,\n        cycle: this.__searchCycle\n      }));\n      setTimeout(function () {\n        self.monitorExecution();\n      }, self.monitoringDelayInMs);\n    },\n\n    /**\n     * This method harvest requests from the PubSub and stores them inside internal\n     * datastruct\n     *\n     * @param apiRequest\n     * @param senderKey\n     */\n    receiveRequests: function receiveRequests(apiRequest, senderKey) {\n      if (this.debug) {\n        console.log('[QM]: received request:', this.hasApp() ? this.getApp().getPluginOrWidgetName(senderKey.getId()) || senderKey.getId() : senderKey.getId(), apiRequest.url());\n      }\n\n      if (this.__searchCycle.collectingRequests) {\n        this.__searchCycle.waiting[senderKey.getId()] = {\n          request: apiRequest,\n          key: senderKey\n        };\n      } else {\n        this.executeRequest(apiRequest, senderKey);\n      }\n    },\n\n    /**\n     * This method executes a request, we check\n     * the local cache and also prepare context for the done/fail callbacks\n     *\n     * @param apiRequest\n     * @param senderKey\n     */\n    executeRequest: function executeRequest(apiRequest, senderKey) {\n      if (!(apiRequest instanceof ApiRequest)) {\n        throw new Error('Sir, I belive you forgot to send me a valid ApiRequest!');\n      } else if (!senderKey) {\n        throw new Error('Request executed, but no widget id provided!');\n      }\n\n      return this._executeRequest(apiRequest, senderKey);\n    },\n    getFailCacheValue: function getFailCacheValue(key) {\n      var failCache = this.failedRequestsCache;\n      return failCache && failCache.getSync(key) || failCache._cache[key] && failCache._cache[key].value;\n    },\n    _executeRequest: function _executeRequest(apiRequest, senderKey) {\n      // for altering widget queries\n      // from regular solr requests to execute_query requests\n      // if bigquery is being used\n      // it's a bigquery\n      if (apiRequest.get('query') && apiRequest.get('query').get('__qid')) {\n        var qid = apiRequest.get('query').get('__qid')[0];\n        apiRequest.set('target', ApiTargets.MYADS_STORAGE + '/execute_query/' + qid);\n      }\n\n      var ps = this.getPubSub();\n      var api = this.getBeeHive().getService('Api');\n\n      var requestKey = this._getCacheKey(apiRequest);\n\n      var maxTry = this.getFailCacheValue(requestKey) || 0;\n\n      if (maxTry >= this.maxRetries) {\n        this.onApiRequestFailure.apply({\n          request: apiRequest,\n          key: senderKey,\n          requestKey: requestKey,\n          qm: this\n        }, [{\n          status: ApiFeedback.CODES.TOO_MANY_FAILURES\n        }, 'Error', 'This request has reached maximum number of failures (wait before retrying)']);\n        var d = $.Deferred();\n        return d.reject();\n      }\n\n      if (this._cache) {\n        var resp = this._cache.getSync(requestKey);\n\n        var self = this;\n\n        if (resp && resp.promise) {\n          // we have already created ajax request\n          resp.done(function () {\n            self._cache.put(requestKey, arguments);\n\n            self.onApiResponse.apply({\n              request: apiRequest,\n              key: senderKey,\n              requestKey: requestKey,\n              qm: self\n            }, arguments);\n          });\n          resp.fail(function () {\n            self._cache.invalidate(requestKey);\n\n            self.onApiRequestFailure.apply({\n              request: apiRequest,\n              pubsub: ps,\n              key: senderKey,\n              requestKey: requestKey,\n              qm: self\n            }, arguments);\n          });\n          return resp;\n        }\n\n        if (resp) {\n          // we already have data (in the cache)\n          var defer = $.Deferred();\n          defer.done(function () {\n            self.onApiResponse.apply({\n              request: apiRequest,\n              key: senderKey,\n              requestKey: requestKey,\n              qm: self\n            }, resp);\n          });\n          defer.resolve();\n          return defer.promise();\n        } // create a new query\n\n\n        var promise = api.request(apiRequest, {\n          done: function done() {\n            self._cache.put(requestKey, arguments);\n\n            self.onApiResponse.apply(this, arguments);\n          },\n          fail: function fail() {\n            self._cache.invalidate(requestKey);\n\n            self.onApiRequestFailure.apply(this, arguments);\n          },\n          context: {\n            request: apiRequest,\n            key: senderKey,\n            requestKey: requestKey,\n            qm: self\n          }\n        });\n\n        this._cache.put(requestKey, promise);\n\n        return promise;\n      }\n\n      return api.request(apiRequest, {\n        done: this.onApiResponse,\n        fail: this.onApiRequestFailure,\n        context: {\n          request: apiRequest,\n          key: senderKey,\n          requestKey: requestKey,\n          qm: this\n        }\n      });\n    },\n    onApiResponse: function onApiResponse(data, textStatus, jqXHR) {\n      var qm = this.qm;\n\n      if (this.request.__STALE) {\n        return;\n      } // TODO: check the status responses\n\n\n      var response = data.responseHeader && data.responseHeader.params ? new ApiResponse(data) : new JsonResponse(data);\n      response.setApiQuery(this.request.get('query'));\n\n      if (qm.debug) {\n        console.log('[QM]: sending response:', qm.hasApp() ? qm.getApp().getPluginOrWidgetName(this.key.getId()) || this.key.getId() : this.key.getId(), data);\n      }\n\n      var pubsub = qm.getBeeHive().getService('PubSub'); // we cant use getPubSub() as we are sending the key\n\n      if (pubsub) pubsub.publish(this.key, pubsub.DELIVERING_RESPONSE + this.key.getId(), response);\n\n      if (qm.failedRequestsCache.getIfPresent(this.requestKey)) {\n        qm.failedRequestsCache.invalidate(this.requestKey);\n      }\n    },\n    onApiRequestFailure: function onApiRequestFailure(jqXHR, textStatus, errorThrown) {\n      var qm = this.qm;\n\n      if (this.request.__STALE) {\n        return;\n      }\n\n      var query = this.request.get('query');\n\n      if (qm.debug) {\n        console.warn('[QM]: request failed', jqXHR, textStatus, errorThrown);\n      }\n\n      var errCount = qm.getFailCacheValue(this.requestKey) || 0;\n      qm.failedRequestsCache.put(this.requestKey, errCount + 1);\n\n      if (qm.tryToRecover.apply(this, arguments)) {\n        console.warn('[QM]: attempting recovery');\n        return true; // means we are trying to recover\n      }\n\n      var feedback = new ApiFeedback({\n        code: ApiFeedback.CODES.API_REQUEST_ERROR,\n        msg: textStatus,\n        request: this.request,\n        error: jqXHR,\n        psk: this.key,\n        errorThrown: errorThrown,\n        text: textStatus\n      });\n      var pubsub = qm.getBeeHive().getService('PubSub');\n      if (pubsub) pubsub.publish(this.key, pubsub.FEEDBACK, feedback);\n      return false; // means: we gave up\n    },\n\n    /**\n     * Method that receives the same arguments as the error callback. It can try to\n     * recover (re-issue) the request. Note: it doesn't need to check whether the\n     * recovery is needed - if we are here, it means 'do what you can to recover'\n     *\n     * This method MUST return 'true' when the request was resent. If it doesn't\n     * return 'true' the sender will be notified about the error.\n     *\n     * If it returns a Feedback object, the sender will be notified using it\n     *\n     * @param jqXHR\n     * @param textStatus\n     * @param errorThrown\n     */\n    tryToRecover: function tryToRecover(jqXHR, textStatus, errorThrown) {\n      var qm = this.qm; // QueryMediator\n\n      var senderKey = this.key;\n      var request = this.request;\n      var requestKey = this.requestKey;\n      var status = jqXHR.status;\n\n      if (status) {\n        switch (status) {\n          case 408: // proxy timeout\n\n          case 409: // conflict\n\n          case 500: // server error\n\n          case 502: // bad gateway\n\n          case 503: // service unavailable\n\n          case 504:\n            // gateway timeout\n            analytics('send', 'event', 'introspection', 'retrying', status);\n            setTimeout(function () {\n              // we can remove the entry from the cache, because\n              // if they eventually succeed, sender will receive\n              // its data (because the promise object inside the\n              // cache contains the function to call delivery\n              if (qm._cache) {\n                var resp = qm._cache.getSync(requestKey);\n\n                if (resp && resp.promise) {\n                  qm._cache.invalidate(requestKey);\n                } else if (resp) {\n                  // it must have succeeded, good!\n                  return;\n                }\n              } // re-send the query\n\n\n              qm._executeRequest.call(qm, request, senderKey);\n            }, qm.recoveryDelayInMs);\n            return true;\n            break;\n\n          default:\n            analytics('send', 'event', 'introspection', 'not-retrying', status, JSON.stringify(qm.mostRecentQuery.toJSON()));\n        }\n      }\n    },\n\n    /**\n     * Creates a unique, cleaned key from the request and the apiQuery\n     * @param apiRequest\n     */\n    _getCacheKey: function _getCacheKey(apiRequest) {\n      var oldQ = apiRequest.get('query');\n      var newQ = this.queryUpdater.clean(oldQ);\n      apiRequest.set('query', newQ);\n      var key = apiRequest.url();\n      apiRequest.set('query', oldQ);\n      return key;\n    },\n    reset: function reset() {\n      this.__searchCycle = {\n        waiting: {},\n        inprogress: {},\n        done: {},\n        failed: {}\n      }; // reset the datastruct\n\n      if (this._cache) {\n        this._cache.invalidateAll();\n      }\n    },\n    getAlerter: function getAlerter() {\n      return this.getApp().getController(this.alertsController || 'AlertsController');\n    },\n    // display tugboat messages if they exist\n    displayTugboatMessages: function displayTugboatMessages() {\n      var TUGBOAT_MESSAGES = {\n        AUTHOR_ANDED_WARNING: 'Author search terms combined with AND rather than OR',\n        ENTRY_DATE_OFFSET_ERROR: 'Can not combine a date and offset (negative value) for the Entry Date',\n        ENTRY_DATE_NON_NUMERIC_ERROR: 'Found a non numeric value in the Entry Date',\n        UNRECOGNIZABLE_VALUE: 'Invalid value for {} supplied'\n      };\n\n      if (!this.original_url) {\n        // without the original url there can be no messages to display\n        return;\n      }\n\n      var messages = [].concat(utils.qs('error_message', this.original_url, false) || [], utils.qs('warning_message', this.original_url, false) || []);\n      var uParams = utils.qs('unprocessed_parameter', this.original_url, false) || [];\n      messages = _.reduce(messages, function (acc, msg) {\n        msg = msg.toUpperCase();\n\n        if (_.has(TUGBOAT_MESSAGES, msg)) {\n          var updatedMsg = TUGBOAT_MESSAGES[msg];\n\n          if (msg === 'UNRECOGNIZABLE_VALUE' && uParams.length > 0) {\n            var param = encodeURIComponent(uParams.pop());\n            updatedMsg = updatedMsg.replace('{}', /^\\w+$/.test(param) ? param : 'parameter');\n          }\n\n          acc.push(updatedMsg);\n        }\n\n        return acc;\n      }, []);\n      var message;\n\n      if (messages.length > 0) {\n        messages.push('See our <a style=\"text-decoration: underline; font-weight: bold\" href=\"/help/faq/#classic-search-translator\">docs</a> for more information');\n        message = messages.join('<br/>');\n        this.getAlerter().alert(new ApiFeedback({\n          type: Alerts.TYPE.INFO,\n          msg: message\n        }));\n      }\n    },\n    resetFailures: function resetFailures() {\n      this.failedRequestsCache.invalidateAll();\n    }\n  });\n\n  _.extend(QueryMediator.prototype, Dependon.BeeHive, Dependon.App);\n\n  return QueryMediator;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//# sourceURL=webpack://bumblebee/./src/js/components/query_mediator.js?");

/***/ }),

/***/ "./src/js/components/solr_params.js":
/*!******************************************!*\
  !*** ./src/js/components/solr_params.js ***!
  \******************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*\nSubclass of the multi-param with a functionality specific for\nSOLR queries. Do not use this class directly inside your app!\nInstead, import 'api_query' and configure it properly\n\n * <p>For a list of possible parameters, please consult the links below.</p>\n *\n * @see http://wiki.apache.org/solr/CoreQueryParameters\n * @see http://wiki.apache.org/solr/CommonQueryParameters\n * @see http://wiki.apache.org/solr/SimpleFacetParameters\n * @see http://wiki.apache.org/solr/HighlightingParameters\n * @see http://wiki.apache.org/solr/MoreLikeThis\n * @see http://wiki.apache.org/solr/SpellCheckComponent\n * @see http://wiki.apache.org/solr/StatsComponent\n * @see http://wiki.apache.org/solr/TermsComponent\n * @see http://wiki.apache.org/solr/TermVectorComponent\n * @see http://wiki.apache.org/solr/LocalParams\n *\n * @param properties A map of fields to set. Refer to the list of public fields.\n * @class ParameterStore\n */\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! js/components/multi_params */ \"./src/js/components/multi_params.js\"), __webpack_require__(/*! backbone */ \"./src/libs/backbone.js\"), __webpack_require__(/*! underscore */ \"./node_modules/underscore/underscore-umd.js\"), __webpack_require__(/*! jquery */ \"./src/libs/jquery.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (MultiParams, Backbone, _, $) {\n  var SolrParams = MultiParams.extend({\n    fieldsToConcatenate: [],\n    defaultOperator: ' ',\n    fieldProcessors: {\n      '*': function _(vals, self) {\n        return [vals.join(self.defaultOperator)];\n      }\n    },\n    initialize: function initialize(attributes, options) {\n      if (options) {\n        _.extend(this, _.pick(options, ['fieldsToConcatenate', 'defaultOperator', 'fieldProcessors']));\n      }\n    },\n    url: function url(resp, options) {\n      // first massage the fields, but do not touch the original values\n      // lodash has a parameter isDeep that can be set to true, but\n      // for compatibility reasons with underscore, lets' not use it\n      // the values should always be only one level deep\n      var values = _.clone(this.attributes);\n\n      var l = this.fieldsToConcatenate.length;\n      var k = '';\n\n      for (var i = 0; i < l; i++) {\n        k = this.fieldsToConcatenate[i];\n\n        if (this.has(k)) {\n          if (this.fieldProcessors[k]) {\n            values[k] = this.fieldProcessors[k](this.get(k), this);\n          } else {\n            values[k] = this.fieldProcessors['*'](this.get(k), this);\n          }\n        }\n      } // then call the default implementation of the url handling\n\n\n      return MultiParams.prototype.url.call(this, values);\n    }\n  });\n  return SolrParams;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//# sourceURL=webpack://bumblebee/./src/js/components/solr_params.js?");

/***/ }),

/***/ "./src/js/components/solr_response.js":
/*!********************************************!*\
  !*** ./src/js/components/solr_response.js ***!
  \********************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n * Created by rchyla on 3/10/14.\n */\n\n/*\n * Subclass of the JSON response - it understands the JSON object as returned\n * by SOLR.\n */\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! js/components/json_response */ \"./src/js/components/json_response.js\"), __webpack_require__(/*! js/components/solr_params */ \"./src/js/components/solr_params.js\"), __webpack_require__(/*! backbone */ \"./src/libs/backbone.js\"), __webpack_require__(/*! underscore */ \"./node_modules/underscore/underscore-umd.js\"), __webpack_require__(/*! jquery */ \"./src/libs/jquery.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (JsonResponse, SolrParams, Backbone, _, $) {\n  /*\n   * Cleans the parameters object by removing empty values\n   * @param {Object} obj\n   */\n  var cleanParams = function cleanParams(obj) {\n    var out = {};\n    Object.keys(obj).forEach(function (key) {\n      if (!_.isEmpty(obj[key])) {\n        out[key] = obj[key];\n      }\n    });\n    return out;\n  };\n\n  var SolrResponse = JsonResponse.extend({\n    initialize: function initialize() {\n      if (!this.has('responseHeader.params')) {\n        throw new Error('SOLR data error - missing: responseHeader.params');\n      }\n\n      if (_.isString(this._url)) {\n        // TODO: this seems ugly, relying on the parent for values\n        var p = new SolrParams();\n        this._url = new SolrParams(p.parse(this._url)).url();\n      } else {\n        var queryParams = this.get('responseHeader.params');\n        this._url = new SolrParams(cleanParams(queryParams)).url();\n      }\n    },\n    url: function url(resp, options) {\n      return this._url;\n    }\n  });\n  return SolrResponse;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//# sourceURL=webpack://bumblebee/./src/js/components/solr_response.js?");

/***/ }),

/***/ "./src/js/mixins/add_secondary_sort.js":
/*!*********************************************!*\
  !*** ./src/js/mixins/add_secondary_sort.js ***!
  \*********************************************/
/***/ (function(module, exports) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n  return {\n    // add secondary sort with correct asc/desc\n    addSecondarySort: function addSecondarySort(apiQuery) {\n      // ensure we always apply a default sort\n      if (!apiQuery.has('sort')) {\n        apiQuery.set('sort', 'date desc');\n      } // only get before the first column to prevent adding redundant secondary sort\n\n\n      var primarySort = apiQuery.get('sort')[0].split(',')[0];\n      var secondarySort = primarySort.indexOf(' asc') > -1 ? 'bibcode asc' : 'bibcode desc';\n      apiQuery.set('sort', primarySort + ', ' + secondarySort);\n    }\n  };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//# sourceURL=webpack://bumblebee/./src/js/mixins/add_secondary_sort.js?");

/***/ }),

/***/ "./src/js/mixins/dependon.js":
/*!***********************************!*\
  !*** ./src/js/mixins/dependon.js ***!
  \***********************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n * Created by rchyla on 3/13/14.\n */\n\n/*\n * This module contains a set of utilities that can be added to classes\n * to give them certain functionality\n */\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! underscore */ \"./node_modules/underscore/underscore-umd.js\"), __webpack_require__(/*! js/components/pubsub_events */ \"./src/js/components/pubsub_events.js\"), __webpack_require__(/*! js/components/pubsub_key */ \"./src/js/components/pubsub_key.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (_, PubSubEvents, PubSubKey) {\n  var Mixin = {\n    /*\n     * BeeHive is the object that allows modules to get access to objects\n     * of the application (but we make sure these objects are protected\n     * and only application can set/change them). This mixin gives objects\n     * functions to query 'BeeHive'\n     */\n    BeeHive: {\n      // called by parents (app) to give modules access\n      setBeeHive: function setBeeHive(brundibar) {\n        if (_.isEmpty(brundibar)) throw new Error('Huh? Empty Beehive? Trying to be funny?');\n        this.__beehive = brundibar;\n      },\n      getBeeHive: function getBeeHive() {\n        if (!this.hasBeeHive()) throw new Error('The BeeHive is inactivate (or dead :<})');\n        return this.__beehive;\n      },\n      hasBeeHive: function hasBeeHive() {\n        if (this.__beehive && (this.__beehive.active || this.__beehive.__facade__ && this.__beehive.getActive())) {\n          return true;\n        }\n\n        return false;\n      },\n\n      /**\n       * Method which returns a masked instance of PubSub (unless the PubSub\n       * is already a hardened instance; which carries its own key)\n       *\n       * You can call pubsub.publish() without having to supply the pubsub key\n       * (which is what most controllers want to do; there are only some\n       * exceptions to this rule; ie. query-mediator). If you need to get\n       * access to the full PubSub (and you have it inside BeeHive) then do\n       * this.getBeeHive().getService('PubSub')\n       */\n      getPubSub: function getPubSub() {\n        if (!this.hasBeeHive()) throw new Error('The BeeHive is inactive (or dead >:})');\n        if (!this.__ctx) this.__ctx = {};\n        if (this.__ctx.pubsub) return this.__ctx.pubsub;\n\n        var pubsub = this.__beehive.getService('PubSub');\n\n        if (pubsub && pubsub.__facade__) return pubsub; // build a unique key for this instance\n\n        this.__ctx.pubsub = {\n          _key: pubsub.getPubSubKey(),\n          _exec: function _exec(name, args) {\n            args = _.toArray(args);\n            if (args[0] instanceof PubSubKey) throw Error('You have given us a PubSub key, this.publish() method does not need it.');\n            args.unshift(this._key);\n            pubsub[name].apply(pubsub, args);\n          },\n          publish: function publish() {\n            this._exec('publish', arguments);\n          },\n          subscribe: function subscribe() {\n            this._exec('subscribe', arguments);\n          },\n          subscribeOnce: function subscribeOnce() {\n            this._exec('subscribeOnce', arguments);\n          },\n          unsubscribe: function unsubscribe() {\n            this._exec('unsubscribe', arguments);\n          },\n          getCurrentPubSubKey: function getCurrentPubSubKey() {\n            return this._key;\n          }\n        };\n\n        _.extend(this.__ctx.pubsub, PubSubEvents);\n\n        return this.__ctx.pubsub;\n      },\n      hasPubSub: function hasPubSub() {\n        if (this.hasBeeHive()) return _.isObject(this.__beehive.getService('PubSub'));\n        return false;\n      }\n    },\n    App: {\n      setApp: function setApp(app) {\n        if (_.isUndefined(app)) throw new Error('App object cannot be empty');\n        this.__app = app;\n      },\n      getApp: function getApp() {\n        return this.__app;\n      },\n      hasApp: function hasApp() {\n        return !_.isEmpty(this.__app);\n      }\n    }\n  };\n  return Mixin;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//# sourceURL=webpack://bumblebee/./src/js/mixins/dependon.js?");

/***/ }),

/***/ "./src/js/mixins/hardened.js":
/*!***********************************!*\
  !*** ./src/js/mixins/hardened.js ***!
  \***********************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n * Created by rchyla on 3/18/14.\n */\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! underscore */ \"./node_modules/underscore/underscore-umd.js\"), __webpack_require__(/*! js/components/facade */ \"./src/js/components/facade.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (_, Facade) {\n  var Mixin = {\n    /*\n     * Creates a hardened instance of itself, it uses\n     * interface description from 'hardenedInterface'\n     * Implementations need to populate 'hardenedInterface'\n     * with list of properties and methods that should be exposed\n     * through the Facade\n     */\n    _getHardenedInstance: function _getHardenedInstance(iface, objectIn) {\n      if (!('hardenedInterface' in this) && !iface) {\n        throw Error('Error: this.hardenedInterface is not defined');\n      }\n\n      return new Facade(iface || ('hardenedInterface' in this ? this.hardenedInterface : {}), objectIn);\n    },\n    getHardenedInstance: function getHardenedInstance(iface) {\n      return this._getHardenedInstance(iface, this);\n    }\n  };\n  return Mixin;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//# sourceURL=webpack://bumblebee/./src/js/mixins/hardened.js?");

/***/ }),

/***/ "./src/js/utils.js":
/*!*************************!*\
  !*** ./src/js/utils.js ***!
  \*************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ \"./src/libs/jquery.js\"), __webpack_require__(/*! underscore */ \"./node_modules/underscore/underscore-umd.js\"), __webpack_require__(/*! analytics */ \"./src/js/components/analytics.js\"), __webpack_require__(/*! react */ \"./src/libs/react.js\"), __webpack_require__(/*! js/components/api_query */ \"./src/js/components/api_query.js\"), __webpack_require__(/*! js/components/api_request */ \"./src/js/components/api_request.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function ($, _, analytics, React, ApiQuery, ApiRequest) {\n  var qs = function qs(key, str, separator) {\n    // eslint-disable-next-line no-useless-escape\n    var k = key.replace(/[*+?^$.[\\]{}()|\\\\\\/]/g, '\\\\$&'); // escape RegEx meta chars\n\n    var pattern = '(^|[\\\\?&])' + k + '=[^&]*';\n    var match = (str || window.location.hash).match(new RegExp(pattern, 'g'));\n\n    if (!match) {\n      return null;\n    }\n\n    var clean = []; // remove 'key=' from string, combine with optional separator and unquote spaces\n\n    for (var i = 0; i < match.length; i += 1) {\n      clean.push(match[i].replace(new RegExp('(^|[\\\\?&])' + k + '='), ''));\n    }\n\n    if (separator) {\n      var msg = clean.join(separator); // works even if separator is undefined\n\n      return decodeURIComponent(msg.replace(/\\+/g, ' '));\n    }\n\n    if (separator === false) {\n      return _.map(clean, function (msg) {\n        return decodeURIComponent(msg.replace(/\\+/g, ' '));\n      });\n    }\n\n    return null;\n  };\n\n  var updateHash = function updateHash(key, value, hash) {\n    // eslint-disable-next-line no-useless-escape\n    var k = key.replace(/[*+?^$.[\\]{}()|\\\\\\/]/g, '\\\\$&');\n    var h = _.isString(hash) ? hash : window.location.hash;\n    var match = h.match(new RegExp('&?' + k + '=([^&]+)(&|$)'));\n\n    if (match) {\n      var mat = match[0].replace(match[1], value);\n      return h.replace(match[0], mat);\n    }\n\n    return hash;\n  };\n\n  var difference = function difference(obj, base) {\n    return _.transform(obj, function (result, value, key) {\n      if (!_.isEqual(value, base[key])) {\n        result[key] = _.isObject(value) && _.isObject(base[key]) ? difference(value, base[key]) : value;\n      }\n    });\n  }; // get the current browser information\n\n\n  var getBrowserInfo = function getBrowserInfo() {\n    // do this inline, so we only request when necessary\n    var $dd = $.Deferred(); // reject after 3 seconds\n\n    var timeoutId = setTimeout(function () {\n      $dd.reject();\n    }, 3000);\n\n    window.require(['bowser'], function (bowser) {\n      window.clearTimeout(timeoutId);\n      $dd.resolve(bowser.parse(window.navigator.userAgent));\n    }, function () {\n      $dd.reject();\n    });\n\n    return $dd.promise();\n  };\n\n  var TimingEvent = /*#__PURE__*/function () {\n    function TimingEvent() {\n      var timingVar = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Timers';\n      var timingCategory = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'Generic Timer';\n      var timingLabel = arguments.length > 2 ? arguments[2] : undefined;\n\n      _classCallCheck(this, TimingEvent);\n\n      this.timingCategory = timingCategory;\n      this.timingVar = timingVar;\n      this.timingLabel = timingLabel;\n      this.time = null;\n    }\n\n    _createClass(TimingEvent, [{\n      key: \"start\",\n      value: function start() {\n        this.time = +new Date();\n        this._emitted = false;\n      }\n    }, {\n      key: \"stop\",\n      value: function stop() {\n        // do not emit an event if we haven't started timing or already emitted\n        if (this._emitted) {\n          return;\n        }\n\n        var time = +new Date() - this.time;\n        analytics('send', 'timing', {\n          timingCategory: this.timingCategory,\n          timingVar: this.timingVar,\n          timingLabel: this.timingLabel,\n          timingValue: time\n        });\n        this._emitted = true;\n      }\n    }]);\n\n    return TimingEvent;\n  }();\n\n  var waitForSelector = function waitForSelector() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    var $dd = $.Deferred();\n    var timeout = 3100; // 31 seconds\n\n    var ref = null;\n\n    (function check(n) {\n      var $el = $.apply(void 0, args);\n\n      if ($el.length) {\n        return $dd.resolve($el);\n      }\n\n      if (n >= timeout) {\n        return $dd.reject('timeout');\n      }\n\n      ref = setTimeout(function () {\n        window.requestAnimationFrame(function () {\n          check(n += 1);\n        });\n      }, 100);\n      return null;\n    })(0);\n\n    $dd.promise.destroy = function () {\n      window.clearTimeout(ref);\n      $dd.reject();\n    };\n\n    return $dd.promise();\n  };\n\n  var withPrerenderedContent = function withPrerenderedContent(view) {\n    view.handlePrerenderedContent = function (content, $el) {\n      // setup the elements so events are properly delegated\n      var selector = view.tagName + '.' + view.className;\n      view.$el = $(selector, $el); // stops mathjax from pre-rendering before we replace the content\n\n      $('>', view.$el).addClass('tex2jax_ignore');\n      view.el = view.$el.get(0);\n      view.delegateEvents(); // replace the current marionette template renderer for a moment\n\n      var _renderTmpl = view._renderTemplate;\n\n      view._renderTemplate = function () {}; // reset template renderer on first model change\n\n\n      view.model.once('change', function () {\n        view._renderTemplate = _renderTmpl;\n      });\n    };\n\n    return view;\n  };\n\n  var escapeRegExp = function escapeRegExp(value) {\n    return value.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n  };\n\n  var makeApiQuery = function makeApiQuery(params) {\n    return new ApiQuery(params);\n  };\n\n  var makeApiRequest = function makeApiRequest(params) {\n    return new ApiRequest(params);\n  };\n\n  var extractErrorMessageFromAjax = function extractErrorMessageFromAjax(maybeXHR, defaultMessage) {\n    if (typeof maybeXHR !== 'undefined' && typeof maybeXHR.responseJSON !== 'undefined') {\n      if (typeof maybeXHR.responseJSON.error === 'string') {\n        return maybeXHR.responseJSON.error;\n      } else if (typeof maybeXHR.responseJSON.message === 'string') {\n        return maybeXHR.responseJSON.message;\n      }\n    }\n\n    return defaultMessage;\n  };\n\n  return {\n    qs: qs,\n    updateHash: updateHash,\n    difference: difference,\n    getBrowserInfo: getBrowserInfo,\n    TimingEvent: TimingEvent,\n    waitForSelector: waitForSelector,\n    withPrerenderedContent: withPrerenderedContent,\n    escapeRegExp: escapeRegExp,\n    makeApiQuery: makeApiQuery,\n    makeApiRequest: makeApiRequest,\n    extractErrorMessageFromAjax: extractErrorMessageFromAjax\n  };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//# sourceURL=webpack://bumblebee/./src/js/utils.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/amd define */
/******/ 	!function() {
/******/ 		__webpack_require__.amdD = function () {
/******/ 			throw new Error('define cannot be used indirect');
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/amd options */
/******/ 	!function() {
/******/ 		__webpack_require__.amdO = {};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/chunk loaded */
/******/ 	!function() {
/******/ 		var deferred = [];
/******/ 		__webpack_require__.O = function(result, chunkIds, fn, priority) {
/******/ 			if(chunkIds) {
/******/ 				priority = priority || 0;
/******/ 				for(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];
/******/ 				deferred[i] = [chunkIds, fn, priority];
/******/ 				return;
/******/ 			}
/******/ 			var notFulfilled = Infinity;
/******/ 			for (var i = 0; i < deferred.length; i++) {
/******/ 				var chunkIds = deferred[i][0];
/******/ 				var fn = deferred[i][1];
/******/ 				var priority = deferred[i][2];
/******/ 				var fulfilled = true;
/******/ 				for (var j = 0; j < chunkIds.length; j++) {
/******/ 					if ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {
/******/ 						chunkIds.splice(j--, 1);
/******/ 					} else {
/******/ 						fulfilled = false;
/******/ 						if(priority < notFulfilled) notFulfilled = priority;
/******/ 					}
/******/ 				}
/******/ 				if(fulfilled) {
/******/ 					deferred.splice(i--, 1)
/******/ 					var r = fn();
/******/ 					if (r !== undefined) result = r;
/******/ 				}
/******/ 			}
/******/ 			return result;
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	!function() {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	!function() {
/******/ 		__webpack_require__.nmd = function(module) {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	!function() {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"QueryMediator": 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		__webpack_require__.O.j = function(chunkId) { return installedChunks[chunkId] === 0; };
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = function(parentChunkLoadingFunction, data) {
/******/ 			var chunkIds = data[0];
/******/ 			var moreModules = data[1];
/******/ 			var runtime = data[2];
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			if(chunkIds.some(function(id) { return installedChunks[id] !== 0; })) {
/******/ 				for(moduleId in moreModules) {
/******/ 					if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 						__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 					}
/******/ 				}
/******/ 				if(runtime) var result = runtime(__webpack_require__);
/******/ 			}
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkId] = 0;
/******/ 			}
/******/ 			return __webpack_require__.O(result);
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = self["webpackChunkbumblebee"] = self["webpackChunkbumblebee"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/nonce */
/******/ 	!function() {
/******/ 		__webpack_require__.nc = undefined;
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module depends on other loaded chunks and execution need to be delayed
/******/ 	var __webpack_exports__ = __webpack_require__.O(undefined, ["vendor"], function() { return __webpack_require__("./src/js/components/query_mediator.js"); })
/******/ 	__webpack_exports__ = __webpack_require__.O(__webpack_exports__);
/******/ 	
/******/ })()
;